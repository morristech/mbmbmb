package android.support.constraint.solver.widgets;

import android.support.constraint.solver.ArrayRow;
import android.support.constraint.solver.Cache;
import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.SolverVariable;
import android.support.constraint.solver.widgets.ConstraintAnchor.ConnectionType;
import android.support.constraint.solver.widgets.ConstraintAnchor.Strength;
import android.support.constraint.solver.widgets.ConstraintAnchor.Type;
import br.com.sapereaude.maskedEditText.MaskedEditText;
import java.util.ArrayList;

public class ConstraintWidget {
    private static final boolean AUTOTAG_CENTER = false;
    public static final int CHAIN_PACKED = 2;
    public static final int CHAIN_SPREAD = 0;
    public static final int CHAIN_SPREAD_INSIDE = 1;
    public static float DEFAULT_BIAS = 0.5f;
    protected static final int DIRECT = 2;
    public static final int GONE = 8;
    public static final int HORIZONTAL = 0;
    public static final int INVISIBLE = 4;
    public static final int MATCH_CONSTRAINT_SPREAD = 0;
    public static final int MATCH_CONSTRAINT_WRAP = 1;
    protected static final int SOLVER = 1;
    public static final int UNKNOWN = -1;
    public static final int VERTICAL = 1;
    public static final int VISIBLE = 0;
    protected ArrayList<ConstraintAnchor> mAnchors;
    ConstraintAnchor mBaseline;
    int mBaselineDistance;
    ConstraintAnchor mBottom;
    boolean mBottomHasCentered;
    ConstraintAnchor mCenter;
    ConstraintAnchor mCenterX;
    ConstraintAnchor mCenterY;
    private Object mCompanionWidget;
    private int mContainerItemSkip;
    private String mDebugName;
    protected float mDimensionRatio;
    protected int mDimensionRatioSide;
    int mDistToBottom;
    int mDistToLeft;
    int mDistToRight;
    int mDistToTop;
    private int mDrawHeight;
    private int mDrawWidth;
    private int mDrawX;
    private int mDrawY;
    int mHeight;
    float mHorizontalBiasPercent;
    boolean mHorizontalChainFixedPosition;
    int mHorizontalChainStyle;
    DimensionBehaviour mHorizontalDimensionBehaviour;
    ConstraintWidget mHorizontalNextWidget;
    public int mHorizontalResolution;
    float mHorizontalWeight;
    boolean mHorizontalWrapVisited;
    ConstraintAnchor mLeft;
    boolean mLeftHasCentered;
    int mMatchConstraintDefaultHeight;
    int mMatchConstraintDefaultWidth;
    int mMatchConstraintMaxHeight;
    int mMatchConstraintMaxWidth;
    int mMatchConstraintMinHeight;
    int mMatchConstraintMinWidth;
    protected int mMinHeight;
    protected int mMinWidth;
    protected int mOffsetX;
    protected int mOffsetY;
    ConstraintWidget mParent;
    ConstraintAnchor mRight;
    boolean mRightHasCentered;
    private int mSolverBottom;
    private int mSolverLeft;
    private int mSolverRight;
    private int mSolverTop;
    ConstraintAnchor mTop;
    boolean mTopHasCentered;
    private String mType;
    float mVerticalBiasPercent;
    boolean mVerticalChainFixedPosition;
    int mVerticalChainStyle;
    DimensionBehaviour mVerticalDimensionBehaviour;
    ConstraintWidget mVerticalNextWidget;
    public int mVerticalResolution;
    float mVerticalWeight;
    boolean mVerticalWrapVisited;
    private int mVisibility;
    int mWidth;
    private int mWrapHeight;
    private int mWrapWidth;
    protected int mX;
    protected int mY;

    public enum ContentAlignment {
        BEGIN,
        MIDDLE,
        END,
        TOP,
        VERTICAL_MIDDLE,
        BOTTOM,
        LEFT,
        RIGHT
    }

    public enum DimensionBehaviour {
        FIXED,
        WRAP_CONTENT,
        MATCH_CONSTRAINT,
        MATCH_PARENT
    }

    public void connectedTo(ConstraintWidget constraintWidget) {
    }

    public void reset() {
        this.mLeft.reset();
        this.mTop.reset();
        this.mRight.reset();
        this.mBottom.reset();
        this.mBaseline.reset();
        this.mCenterX.reset();
        this.mCenterY.reset();
        this.mCenter.reset();
        this.mParent = null;
        this.mWidth = 0;
        this.mHeight = 0;
        this.mDimensionRatio = 0.0f;
        this.mDimensionRatioSide = -1;
        this.mX = 0;
        this.mY = 0;
        this.mDrawX = 0;
        this.mDrawY = 0;
        this.mDrawWidth = 0;
        this.mDrawHeight = 0;
        this.mOffsetX = 0;
        this.mOffsetY = 0;
        this.mBaselineDistance = 0;
        this.mMinWidth = 0;
        this.mMinHeight = 0;
        this.mWrapWidth = 0;
        this.mWrapHeight = 0;
        this.mHorizontalBiasPercent = DEFAULT_BIAS;
        this.mVerticalBiasPercent = DEFAULT_BIAS;
        this.mHorizontalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mVerticalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mCompanionWidget = null;
        this.mContainerItemSkip = 0;
        this.mVisibility = 0;
        this.mDebugName = null;
        this.mType = null;
        this.mHorizontalWrapVisited = false;
        this.mVerticalWrapVisited = false;
        this.mHorizontalChainStyle = 0;
        this.mVerticalChainStyle = 0;
        this.mHorizontalChainFixedPosition = false;
        this.mVerticalChainFixedPosition = false;
        this.mHorizontalWeight = 0.0f;
        this.mVerticalWeight = 0.0f;
        this.mHorizontalResolution = -1;
        this.mVerticalResolution = -1;
    }

    public ConstraintWidget() {
        this.mHorizontalResolution = -1;
        this.mVerticalResolution = -1;
        this.mMatchConstraintDefaultWidth = 0;
        this.mMatchConstraintDefaultHeight = 0;
        this.mMatchConstraintMinWidth = 0;
        this.mMatchConstraintMaxWidth = 0;
        this.mMatchConstraintMinHeight = 0;
        this.mMatchConstraintMaxHeight = 0;
        this.mLeft = new ConstraintAnchor(this, Type.LEFT);
        this.mTop = new ConstraintAnchor(this, Type.TOP);
        this.mRight = new ConstraintAnchor(this, Type.RIGHT);
        this.mBottom = new ConstraintAnchor(this, Type.BOTTOM);
        this.mBaseline = new ConstraintAnchor(this, Type.BASELINE);
        this.mCenterX = new ConstraintAnchor(this, Type.CENTER_X);
        this.mCenterY = new ConstraintAnchor(this, Type.CENTER_Y);
        this.mCenter = new ConstraintAnchor(this, Type.CENTER);
        this.mAnchors = new ArrayList();
        this.mParent = null;
        this.mWidth = 0;
        this.mHeight = 0;
        this.mDimensionRatio = 0.0f;
        this.mDimensionRatioSide = -1;
        this.mSolverLeft = 0;
        this.mSolverTop = 0;
        this.mSolverRight = 0;
        this.mSolverBottom = 0;
        this.mX = 0;
        this.mY = 0;
        this.mDrawX = 0;
        this.mDrawY = 0;
        this.mDrawWidth = 0;
        this.mDrawHeight = 0;
        this.mOffsetX = 0;
        this.mOffsetY = 0;
        this.mBaselineDistance = 0;
        this.mHorizontalBiasPercent = DEFAULT_BIAS;
        this.mVerticalBiasPercent = DEFAULT_BIAS;
        this.mHorizontalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mVerticalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mContainerItemSkip = 0;
        this.mVisibility = 0;
        this.mDebugName = null;
        this.mType = null;
        this.mHorizontalChainStyle = 0;
        this.mVerticalChainStyle = 0;
        this.mHorizontalWeight = 0.0f;
        this.mVerticalWeight = 0.0f;
        this.mHorizontalNextWidget = null;
        this.mVerticalNextWidget = null;
        addAnchors();
    }

    public ConstraintWidget(int i, int i2, int i3, int i4) {
        this.mHorizontalResolution = -1;
        this.mVerticalResolution = -1;
        this.mMatchConstraintDefaultWidth = 0;
        this.mMatchConstraintDefaultHeight = 0;
        this.mMatchConstraintMinWidth = 0;
        this.mMatchConstraintMaxWidth = 0;
        this.mMatchConstraintMinHeight = 0;
        this.mMatchConstraintMaxHeight = 0;
        this.mLeft = new ConstraintAnchor(this, Type.LEFT);
        this.mTop = new ConstraintAnchor(this, Type.TOP);
        this.mRight = new ConstraintAnchor(this, Type.RIGHT);
        this.mBottom = new ConstraintAnchor(this, Type.BOTTOM);
        this.mBaseline = new ConstraintAnchor(this, Type.BASELINE);
        this.mCenterX = new ConstraintAnchor(this, Type.CENTER_X);
        this.mCenterY = new ConstraintAnchor(this, Type.CENTER_Y);
        this.mCenter = new ConstraintAnchor(this, Type.CENTER);
        this.mAnchors = new ArrayList();
        this.mParent = null;
        this.mWidth = 0;
        this.mHeight = 0;
        this.mDimensionRatio = 0.0f;
        this.mDimensionRatioSide = -1;
        this.mSolverLeft = 0;
        this.mSolverTop = 0;
        this.mSolverRight = 0;
        this.mSolverBottom = 0;
        this.mX = 0;
        this.mY = 0;
        this.mDrawX = 0;
        this.mDrawY = 0;
        this.mDrawWidth = 0;
        this.mDrawHeight = 0;
        this.mOffsetX = 0;
        this.mOffsetY = 0;
        this.mBaselineDistance = 0;
        this.mHorizontalBiasPercent = DEFAULT_BIAS;
        this.mVerticalBiasPercent = DEFAULT_BIAS;
        this.mHorizontalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mVerticalDimensionBehaviour = DimensionBehaviour.FIXED;
        this.mContainerItemSkip = 0;
        this.mVisibility = 0;
        this.mDebugName = null;
        this.mType = null;
        this.mHorizontalChainStyle = 0;
        this.mVerticalChainStyle = 0;
        this.mHorizontalWeight = 0.0f;
        this.mVerticalWeight = 0.0f;
        this.mHorizontalNextWidget = null;
        this.mVerticalNextWidget = null;
        this.mX = i;
        this.mY = i2;
        this.mWidth = i3;
        this.mHeight = i4;
        addAnchors();
        forceUpdateDrawPosition();
    }

    public ConstraintWidget(int i, int i2) {
        this(0, 0, i, i2);
    }

    public void resetSolverVariables(Cache cache) {
        this.mLeft.resetSolverVariable(cache);
        this.mTop.resetSolverVariable(cache);
        this.mRight.resetSolverVariable(cache);
        this.mBottom.resetSolverVariable(cache);
        this.mBaseline.resetSolverVariable(cache);
        this.mCenter.resetSolverVariable(cache);
        this.mCenterX.resetSolverVariable(cache);
        this.mCenterY.resetSolverVariable(cache);
    }

    public void resetGroups() {
        int size = this.mAnchors.size();
        for (int i = 0; i < size; i++) {
            ((ConstraintAnchor) this.mAnchors.get(i)).mGroup = Integer.MAX_VALUE;
        }
    }

    private void addAnchors() {
        this.mAnchors.add(this.mLeft);
        this.mAnchors.add(this.mTop);
        this.mAnchors.add(this.mRight);
        this.mAnchors.add(this.mBottom);
        this.mAnchors.add(this.mCenterX);
        this.mAnchors.add(this.mCenterY);
        this.mAnchors.add(this.mBaseline);
    }

    public boolean isRoot() {
        return this.mParent == null;
    }

    public boolean isRootContainer() {
        return (this instanceof ConstraintWidgetContainer) && (this.mParent == null || !(this.mParent instanceof ConstraintWidgetContainer));
    }

    public boolean isInsideConstraintLayout() {
        ConstraintWidget parent = getParent();
        if (parent == null) {
            return false;
        }
        while (parent != null) {
            if (parent instanceof ConstraintWidgetContainer) {
                return true;
            }
            parent = parent.getParent();
        }
        return false;
    }

    public boolean hasAncestor(ConstraintWidget constraintWidget) {
        ConstraintWidget parent = getParent();
        if (parent == constraintWidget) {
            return true;
        }
        if (parent == constraintWidget.getParent()) {
            return false;
        }
        while (parent != null) {
            if (parent == constraintWidget || parent == constraintWidget.getParent()) {
                return true;
            }
            parent = parent.getParent();
        }
        return false;
    }

    public WidgetContainer getRootWidgetContainer() {
        ConstraintWidget constraintWidget = this;
        while (constraintWidget.getParent() != null) {
            constraintWidget = constraintWidget.getParent();
        }
        return constraintWidget instanceof WidgetContainer ? (WidgetContainer) constraintWidget : null;
    }

    public ConstraintWidget getParent() {
        return this.mParent;
    }

    public void setParent(ConstraintWidget constraintWidget) {
        this.mParent = constraintWidget;
    }

    public String getType() {
        return this.mType;
    }

    public void setType(String str) {
        this.mType = str;
    }

    public void setVisibility(int i) {
        this.mVisibility = i;
    }

    public int getVisibility() {
        return this.mVisibility;
    }

    public String getDebugName() {
        return this.mDebugName;
    }

    public void setDebugName(String str) {
        this.mDebugName = str;
    }

    public void setDebugSolverName(LinearSystem linearSystem, String str) {
        this.mDebugName = str;
        SolverVariable createObjectVariable = linearSystem.createObjectVariable(this.mLeft);
        SolverVariable createObjectVariable2 = linearSystem.createObjectVariable(this.mTop);
        SolverVariable createObjectVariable3 = linearSystem.createObjectVariable(this.mRight);
        SolverVariable createObjectVariable4 = linearSystem.createObjectVariable(this.mBottom);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(str);
        stringBuilder.append(".left");
        createObjectVariable.setName(stringBuilder.toString());
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append(str);
        stringBuilder2.append(".top");
        createObjectVariable2.setName(stringBuilder2.toString());
        stringBuilder2 = new StringBuilder();
        stringBuilder2.append(str);
        stringBuilder2.append(".right");
        createObjectVariable3.setName(stringBuilder2.toString());
        stringBuilder2 = new StringBuilder();
        stringBuilder2.append(str);
        stringBuilder2.append(".bottom");
        createObjectVariable4.setName(stringBuilder2.toString());
        if (this.mBaselineDistance > 0) {
            linearSystem = linearSystem.createObjectVariable(this.mBaseline);
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(".baseline");
            linearSystem.setName(stringBuilder2.toString());
        }
    }

    public String toString() {
        String stringBuilder;
        StringBuilder stringBuilder2 = new StringBuilder();
        if (this.mType != null) {
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder3.append("type: ");
            stringBuilder3.append(this.mType);
            stringBuilder3.append(MaskedEditText.SPACE);
            stringBuilder = stringBuilder3.toString();
        } else {
            stringBuilder = "";
        }
        stringBuilder2.append(stringBuilder);
        if (this.mDebugName != null) {
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("id: ");
            stringBuilder3.append(this.mDebugName);
            stringBuilder3.append(MaskedEditText.SPACE);
            stringBuilder = stringBuilder3.toString();
        } else {
            stringBuilder = "";
        }
        stringBuilder2.append(stringBuilder);
        stringBuilder2.append("(");
        stringBuilder2.append(this.mX);
        stringBuilder2.append(", ");
        stringBuilder2.append(this.mY);
        stringBuilder2.append(") - (");
        stringBuilder2.append(this.mWidth);
        stringBuilder2.append(" x ");
        stringBuilder2.append(this.mHeight);
        stringBuilder2.append(")");
        stringBuilder2.append(" wrap: (");
        stringBuilder2.append(this.mWrapWidth);
        stringBuilder2.append(" x ");
        stringBuilder2.append(this.mWrapHeight);
        stringBuilder2.append(")");
        return stringBuilder2.toString();
    }

    int getInternalDrawX() {
        return this.mDrawX;
    }

    int getInternalDrawY() {
        return this.mDrawY;
    }

    public int getInternalDrawRight() {
        return this.mDrawX + this.mDrawWidth;
    }

    public int getInternalDrawBottom() {
        return this.mDrawY + this.mDrawHeight;
    }

    public int getX() {
        return this.mX;
    }

    public int getY() {
        return this.mY;
    }

    public int getWidth() {
        if (this.mVisibility == 8) {
            return 0;
        }
        return this.mWidth;
    }

    public int getOptimizerWrapWidth() {
        int i = this.mWidth;
        if (this.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
            return i;
        }
        if (this.mMatchConstraintDefaultWidth == 1) {
            i = Math.max(this.mMatchConstraintMinWidth, i);
        } else if (this.mMatchConstraintMinWidth > 0) {
            i = this.mMatchConstraintMinWidth;
            this.mWidth = i;
        } else {
            i = 0;
        }
        return (this.mMatchConstraintMaxWidth <= 0 || this.mMatchConstraintMaxWidth >= i) ? i : this.mMatchConstraintMaxWidth;
    }

    public int getOptimizerWrapHeight() {
        int i = this.mHeight;
        if (this.mVerticalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
            return i;
        }
        if (this.mMatchConstraintDefaultHeight == 1) {
            i = Math.max(this.mMatchConstraintMinHeight, i);
        } else if (this.mMatchConstraintMinHeight > 0) {
            i = this.mMatchConstraintMinHeight;
            this.mHeight = i;
        } else {
            i = 0;
        }
        return (this.mMatchConstraintMaxHeight <= 0 || this.mMatchConstraintMaxHeight >= i) ? i : this.mMatchConstraintMaxHeight;
    }

    public int getWrapWidth() {
        return this.mWrapWidth;
    }

    public int getHeight() {
        if (this.mVisibility == 8) {
            return 0;
        }
        return this.mHeight;
    }

    public int getWrapHeight() {
        return this.mWrapHeight;
    }

    public int getDrawX() {
        return this.mDrawX + this.mOffsetX;
    }

    public int getDrawY() {
        return this.mDrawY + this.mOffsetY;
    }

    public int getDrawWidth() {
        return this.mDrawWidth;
    }

    public int getDrawHeight() {
        return this.mDrawHeight;
    }

    public int getDrawBottom() {
        return getDrawY() + this.mDrawHeight;
    }

    public int getDrawRight() {
        return getDrawX() + this.mDrawWidth;
    }

    protected int getRootX() {
        return this.mX + this.mOffsetX;
    }

    protected int getRootY() {
        return this.mY + this.mOffsetY;
    }

    public int getMinWidth() {
        return this.mMinWidth;
    }

    public int getMinHeight() {
        return this.mMinHeight;
    }

    public int getLeft() {
        return getX();
    }

    public int getTop() {
        return getY();
    }

    public int getRight() {
        return getX() + this.mWidth;
    }

    public int getBottom() {
        return getY() + this.mHeight;
    }

    public float getHorizontalBiasPercent() {
        return this.mHorizontalBiasPercent;
    }

    public float getVerticalBiasPercent() {
        return this.mVerticalBiasPercent;
    }

    public boolean hasBaseline() {
        return this.mBaselineDistance > 0;
    }

    public int getBaselineDistance() {
        return this.mBaselineDistance;
    }

    public Object getCompanionWidget() {
        return this.mCompanionWidget;
    }

    public ArrayList<ConstraintAnchor> getAnchors() {
        return this.mAnchors;
    }

    public void setX(int i) {
        this.mX = i;
    }

    public void setY(int i) {
        this.mY = i;
    }

    public void setOrigin(int i, int i2) {
        this.mX = i;
        this.mY = i2;
    }

    public void setOffset(int i, int i2) {
        this.mOffsetX = i;
        this.mOffsetY = i2;
    }

    public void setGoneMargin(Type type, int i) {
        switch (type) {
            case LEFT:
                this.mLeft.mGoneMargin = i;
                return;
            case TOP:
                this.mTop.mGoneMargin = i;
                return;
            case RIGHT:
                this.mRight.mGoneMargin = i;
                return;
            case BOTTOM:
                this.mBottom.mGoneMargin = i;
                return;
            default:
                return;
        }
    }

    public void updateDrawPosition() {
        int i = this.mX;
        int i2 = this.mY;
        int i3 = this.mX + this.mWidth;
        int i4 = this.mY + this.mHeight;
        this.mDrawX = i;
        this.mDrawY = i2;
        this.mDrawWidth = i3 - i;
        this.mDrawHeight = i4 - i2;
    }

    public void forceUpdateDrawPosition() {
        int i = this.mX;
        int i2 = this.mY;
        int i3 = this.mX + this.mWidth;
        int i4 = this.mY + this.mHeight;
        this.mDrawX = i;
        this.mDrawY = i2;
        this.mDrawWidth = i3 - i;
        this.mDrawHeight = i4 - i2;
    }

    public void setDrawOrigin(int i, int i2) {
        this.mDrawX = i - this.mOffsetX;
        this.mDrawY = i2 - this.mOffsetY;
        this.mX = this.mDrawX;
        this.mY = this.mDrawY;
    }

    public void setDrawX(int i) {
        this.mDrawX = i - this.mOffsetX;
        this.mX = this.mDrawX;
    }

    public void setDrawY(int i) {
        this.mDrawY = i - this.mOffsetY;
        this.mY = this.mDrawY;
    }

    public void setDrawWidth(int i) {
        this.mDrawWidth = i;
    }

    public void setDrawHeight(int i) {
        this.mDrawHeight = i;
    }

    public void setWidth(int i) {
        this.mWidth = i;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setHeight(int i) {
        this.mHeight = i;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setHorizontalMatchStyle(int i, int i2, int i3) {
        this.mMatchConstraintDefaultWidth = i;
        this.mMatchConstraintMinWidth = i2;
        this.mMatchConstraintMaxWidth = i3;
    }

    public void setVerticalMatchStyle(int i, int i2, int i3) {
        this.mMatchConstraintDefaultHeight = i;
        this.mMatchConstraintMinHeight = i2;
        this.mMatchConstraintMaxHeight = i3;
    }

    public void setDimensionRatio(java.lang.String r9) {
        /* JADX: method processing error */
/*
Error: java.lang.NullPointerException
	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.searchTryCatchDominators(ProcessTryCatchRegions.java:75)
	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.process(ProcessTryCatchRegions.java:45)
	at jadx.core.dex.visitors.regions.RegionMakerVisitor.postProcessRegions(RegionMakerVisitor.java:63)
	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:58)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:56)
	at jadx.core.ProcessClass.process(ProcessClass.java:39)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:282)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
	at jadx.api.JadxDecompiler$$Lambda$8/1515877023.run(Unknown Source)
*/
        /*
        r8 = this;
        r0 = 0;
        if (r9 == 0) goto L_0x008e;
    L_0x0003:
        r1 = r9.length();
        if (r1 != 0) goto L_0x000b;
    L_0x0009:
        goto L_0x008e;
    L_0x000b:
        r1 = -1;
        r2 = r9.length();
        r3 = 44;
        r3 = r9.indexOf(r3);
        r4 = 0;
        r5 = 1;
        if (r3 <= 0) goto L_0x0037;
    L_0x001a:
        r6 = r2 + -1;
        if (r3 >= r6) goto L_0x0037;
    L_0x001e:
        r6 = r9.substring(r4, r3);
        r7 = "W";
        r7 = r6.equalsIgnoreCase(r7);
        if (r7 == 0) goto L_0x002c;
    L_0x002a:
        r1 = r4;
        goto L_0x0035;
    L_0x002c:
        r4 = "H";
        r4 = r6.equalsIgnoreCase(r4);
        if (r4 == 0) goto L_0x0035;
    L_0x0034:
        r1 = r5;
    L_0x0035:
        r4 = r3 + 1;
    L_0x0037:
        r3 = 58;
        r3 = r9.indexOf(r3);
        if (r3 < 0) goto L_0x0075;
    L_0x003f:
        r2 = r2 - r5;
        if (r3 >= r2) goto L_0x0075;
    L_0x0042:
        r2 = r9.substring(r4, r3);
        r3 = r3 + r5;
        r9 = r9.substring(r3);
        r3 = r2.length();
        if (r3 <= 0) goto L_0x0084;
    L_0x0051:
        r3 = r9.length();
        if (r3 <= 0) goto L_0x0084;
    L_0x0057:
        r2 = java.lang.Float.parseFloat(r2);	 Catch:{ NumberFormatException -> 0x0084 }
        r9 = java.lang.Float.parseFloat(r9);	 Catch:{ NumberFormatException -> 0x0084 }
        r3 = (r2 > r0 ? 1 : (r2 == r0 ? 0 : -1));	 Catch:{ NumberFormatException -> 0x0084 }
        if (r3 <= 0) goto L_0x0084;	 Catch:{ NumberFormatException -> 0x0084 }
    L_0x0063:
        r3 = (r9 > r0 ? 1 : (r9 == r0 ? 0 : -1));	 Catch:{ NumberFormatException -> 0x0084 }
        if (r3 <= 0) goto L_0x0084;	 Catch:{ NumberFormatException -> 0x0084 }
    L_0x0067:
        if (r1 != r5) goto L_0x006f;	 Catch:{ NumberFormatException -> 0x0084 }
    L_0x0069:
        r9 = r9 / r2;	 Catch:{ NumberFormatException -> 0x0084 }
        r9 = java.lang.Math.abs(r9);	 Catch:{ NumberFormatException -> 0x0084 }
        goto L_0x0085;	 Catch:{ NumberFormatException -> 0x0084 }
    L_0x006f:
        r2 = r2 / r9;	 Catch:{ NumberFormatException -> 0x0084 }
        r9 = java.lang.Math.abs(r2);	 Catch:{ NumberFormatException -> 0x0084 }
        goto L_0x0085;
    L_0x0075:
        r9 = r9.substring(r4);
        r2 = r9.length();
        if (r2 <= 0) goto L_0x0084;
    L_0x007f:
        r9 = java.lang.Float.parseFloat(r9);	 Catch:{ NumberFormatException -> 0x0084 }
        goto L_0x0085;
    L_0x0084:
        r9 = r0;
    L_0x0085:
        r0 = (r9 > r0 ? 1 : (r9 == r0 ? 0 : -1));
        if (r0 <= 0) goto L_0x008d;
    L_0x0089:
        r8.mDimensionRatio = r9;
        r8.mDimensionRatioSide = r1;
    L_0x008d:
        return;
    L_0x008e:
        r8.mDimensionRatio = r0;
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: android.support.constraint.solver.widgets.ConstraintWidget.setDimensionRatio(java.lang.String):void");
    }

    public void setDimensionRatio(float f, int i) {
        this.mDimensionRatio = f;
        this.mDimensionRatioSide = i;
    }

    public float getDimensionRatio() {
        return this.mDimensionRatio;
    }

    public int getDimensionRatioSide() {
        return this.mDimensionRatioSide;
    }

    public void setHorizontalBiasPercent(float f) {
        this.mHorizontalBiasPercent = f;
    }

    public void setVerticalBiasPercent(float f) {
        this.mVerticalBiasPercent = f;
    }

    public void setMinWidth(int i) {
        if (i < 0) {
            this.mMinWidth = 0;
        } else {
            this.mMinWidth = i;
        }
    }

    public void setMinHeight(int i) {
        if (i < 0) {
            this.mMinHeight = 0;
        } else {
            this.mMinHeight = i;
        }
    }

    public void setWrapWidth(int i) {
        this.mWrapWidth = i;
    }

    public void setWrapHeight(int i) {
        this.mWrapHeight = i;
    }

    public void setDimension(int i, int i2) {
        this.mWidth = i;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
        this.mHeight = i2;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setFrame(int i, int i2, int i3, int i4) {
        i3 -= i;
        i4 -= i2;
        this.mX = i;
        this.mY = i2;
        if (this.mVisibility == 8) {
            this.mWidth = 0;
            this.mHeight = 0;
            return;
        }
        if (this.mHorizontalDimensionBehaviour == DimensionBehaviour.FIXED && i3 < this.mWidth) {
            i3 = this.mWidth;
        }
        if (this.mVerticalDimensionBehaviour == DimensionBehaviour.FIXED && i4 < this.mHeight) {
            i4 = this.mHeight;
        }
        this.mWidth = i3;
        this.mHeight = i4;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setHorizontalDimension(int i, int i2) {
        this.mX = i;
        this.mWidth = i2 - i;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setVerticalDimension(int i, int i2) {
        this.mY = i;
        this.mHeight = i2 - i;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setBaselineDistance(int i) {
        this.mBaselineDistance = i;
    }

    public void setCompanionWidget(Object obj) {
        this.mCompanionWidget = obj;
    }

    public void setContainerItemSkip(int i) {
        if (i >= 0) {
            this.mContainerItemSkip = i;
        } else {
            this.mContainerItemSkip = 0;
        }
    }

    public int getContainerItemSkip() {
        return this.mContainerItemSkip;
    }

    public void setHorizontalWeight(float f) {
        this.mHorizontalWeight = f;
    }

    public void setVerticalWeight(float f) {
        this.mVerticalWeight = f;
    }

    public void setHorizontalChainStyle(int i) {
        this.mHorizontalChainStyle = i;
    }

    public int getHorizontalChainStyle() {
        return this.mHorizontalChainStyle;
    }

    public void setVerticalChainStyle(int i) {
        this.mVerticalChainStyle = i;
    }

    public int getVerticalChainStyle() {
        return this.mVerticalChainStyle;
    }

    public void immediateConnect(Type type, ConstraintWidget constraintWidget, Type type2, int i, int i2) {
        getAnchor(type).connect(constraintWidget.getAnchor(type2), i, i2, Strength.STRONG, 0, true);
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int i, int i2) {
        connect(constraintAnchor, constraintAnchor2, i, Strength.STRONG, i2);
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int i) {
        connect(constraintAnchor, constraintAnchor2, i, Strength.STRONG, 0);
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int i, Strength strength, int i2) {
        if (constraintAnchor.getOwner() == this) {
            connect(constraintAnchor.getType(), constraintAnchor2.getOwner(), constraintAnchor2.getType(), i, strength, i2);
        }
    }

    public void connect(Type type, ConstraintWidget constraintWidget, Type type2, int i) {
        connect(type, constraintWidget, type2, i, Strength.STRONG);
    }

    public void connect(Type type, ConstraintWidget constraintWidget, Type type2) {
        connect(type, constraintWidget, type2, 0, Strength.STRONG);
    }

    public void connect(Type type, ConstraintWidget constraintWidget, Type type2, int i, Strength strength) {
        connect(type, constraintWidget, type2, i, strength, 0);
    }

    public void connect(Type type, ConstraintWidget constraintWidget, Type type2, int i, Strength strength, int i2) {
        ConstraintWidget constraintWidget2 = this;
        Type type3 = type;
        ConstraintWidget constraintWidget3 = constraintWidget;
        Type type4 = type2;
        int i3 = i2;
        int i4 = 0;
        ConstraintAnchor anchor;
        ConstraintAnchor anchor2;
        if (type3 == Type.CENTER) {
            ConstraintWidget constraintWidget4;
            Strength strength2;
            int i5;
            if (type4 == Type.CENTER) {
                int i6;
                anchor = getAnchor(Type.LEFT);
                anchor2 = getAnchor(Type.RIGHT);
                ConstraintAnchor anchor3 = getAnchor(Type.TOP);
                ConstraintAnchor anchor4 = getAnchor(Type.BOTTOM);
                int i7 = 1;
                if ((anchor == null || !anchor.isConnected()) && (anchor2 == null || !anchor2.isConnected())) {
                    constraintWidget4 = constraintWidget3;
                    strength2 = strength;
                    i5 = i3;
                    connect(Type.LEFT, constraintWidget4, Type.LEFT, 0, strength2, i5);
                    connect(Type.RIGHT, constraintWidget4, Type.RIGHT, 0, strength2, i5);
                    i6 = 1;
                } else {
                    i6 = 0;
                }
                if ((anchor3 == null || !anchor3.isConnected()) && (anchor4 == null || !anchor4.isConnected())) {
                    constraintWidget4 = constraintWidget3;
                    strength2 = strength;
                    i5 = i3;
                    connect(Type.TOP, constraintWidget4, Type.TOP, 0, strength2, i5);
                    connect(Type.BOTTOM, constraintWidget4, Type.BOTTOM, 0, strength2, i5);
                } else {
                    i7 = 0;
                }
                if (i6 != 0 && i7 != 0) {
                    getAnchor(Type.CENTER).connect(constraintWidget3.getAnchor(Type.CENTER), 0, i3);
                    return;
                } else if (i6 != 0) {
                    getAnchor(Type.CENTER_X).connect(constraintWidget3.getAnchor(Type.CENTER_X), 0, i3);
                    return;
                } else if (i7 != 0) {
                    getAnchor(Type.CENTER_Y).connect(constraintWidget3.getAnchor(Type.CENTER_Y), 0, i3);
                    return;
                } else {
                    return;
                }
            }
            Type type5;
            if (type4 != Type.LEFT) {
                if (type4 != Type.RIGHT) {
                    if (type4 == Type.TOP || type4 == Type.BOTTOM) {
                        constraintWidget4 = constraintWidget3;
                        type5 = type4;
                        strength2 = strength;
                        i5 = i3;
                        connect(Type.TOP, constraintWidget4, type5, 0, strength2, i5);
                        connect(Type.BOTTOM, constraintWidget4, type5, 0, strength2, i5);
                        getAnchor(Type.CENTER).connect(constraintWidget.getAnchor(type2), 0, i3);
                        return;
                    }
                    return;
                }
            }
            constraintWidget4 = constraintWidget3;
            type5 = type4;
            strength2 = strength;
            i5 = i3;
            connect(Type.LEFT, constraintWidget4, type5, 0, strength2, i5);
            connect(Type.RIGHT, constraintWidget4, type5, 0, strength2, i5);
            getAnchor(Type.CENTER).connect(constraintWidget.getAnchor(type2), 0, i3);
        } else if (type3 == Type.CENTER_X && (type4 == Type.LEFT || type4 == Type.RIGHT)) {
            anchor = getAnchor(Type.LEFT);
            anchor2 = constraintWidget.getAnchor(type2);
            r2 = getAnchor(Type.RIGHT);
            anchor.connect(anchor2, 0, i3);
            r2.connect(anchor2, 0, i3);
            getAnchor(Type.CENTER_X).connect(anchor2, 0, i3);
        } else if (type3 == Type.CENTER_Y && (type4 == Type.TOP || type4 == Type.BOTTOM)) {
            anchor = constraintWidget.getAnchor(type2);
            getAnchor(Type.TOP).connect(anchor, 0, i3);
            getAnchor(Type.BOTTOM).connect(anchor, 0, i3);
            getAnchor(Type.CENTER_Y).connect(anchor, 0, i3);
        } else if (type3 == Type.CENTER_X && type4 == Type.CENTER_X) {
            getAnchor(Type.LEFT).connect(constraintWidget3.getAnchor(Type.LEFT), 0, i3);
            getAnchor(Type.RIGHT).connect(constraintWidget3.getAnchor(Type.RIGHT), 0, i3);
            getAnchor(Type.CENTER_X).connect(constraintWidget.getAnchor(type2), 0, i3);
        } else if (type3 == Type.CENTER_Y && type4 == Type.CENTER_Y) {
            getAnchor(Type.TOP).connect(constraintWidget3.getAnchor(Type.TOP), 0, i3);
            getAnchor(Type.BOTTOM).connect(constraintWidget3.getAnchor(Type.BOTTOM), 0, i3);
            getAnchor(Type.CENTER_Y).connect(constraintWidget.getAnchor(type2), 0, i3);
        } else {
            anchor2 = getAnchor(type);
            r2 = constraintWidget.getAnchor(type2);
            if (anchor2.isValidConnection(r2)) {
                ConstraintAnchor anchor5;
                if (type3 == Type.BASELINE) {
                    anchor = getAnchor(Type.TOP);
                    anchor5 = getAnchor(Type.BOTTOM);
                    if (anchor != null) {
                        anchor.reset();
                    }
                    if (anchor5 != null) {
                        anchor5.reset();
                    }
                } else {
                    if (type3 != Type.TOP) {
                        if (type3 != Type.BOTTOM) {
                            if (type3 == Type.LEFT || type3 == Type.RIGHT) {
                                anchor5 = getAnchor(Type.CENTER);
                                if (anchor5.getTarget() != r2) {
                                    anchor5.reset();
                                }
                                anchor = getAnchor(type).getOpposite();
                                anchor5 = getAnchor(Type.CENTER_X);
                                if (anchor5.isConnected()) {
                                    anchor.reset();
                                    anchor5.reset();
                                }
                            }
                            i4 = i;
                        }
                    }
                    anchor5 = getAnchor(Type.BASELINE);
                    if (anchor5 != null) {
                        anchor5.reset();
                    }
                    anchor5 = getAnchor(Type.CENTER);
                    if (anchor5.getTarget() != r2) {
                        anchor5.reset();
                    }
                    anchor = getAnchor(type).getOpposite();
                    anchor5 = getAnchor(Type.CENTER_Y);
                    if (anchor5.isConnected()) {
                        anchor.reset();
                        anchor5.reset();
                    }
                    i4 = i;
                }
                anchor2.connect(r2, i4, strength, i3);
                r2.getOwner().connectedTo(anchor2.getOwner());
            }
        }
    }

    public void resetAllConstraints() {
        resetAnchors();
        setVerticalBiasPercent(DEFAULT_BIAS);
        setHorizontalBiasPercent(DEFAULT_BIAS);
        if (!(this instanceof ConstraintWidgetContainer)) {
            if (getHorizontalDimensionBehaviour() == DimensionBehaviour.MATCH_CONSTRAINT) {
                if (getWidth() == getWrapWidth()) {
                    setHorizontalDimensionBehaviour(DimensionBehaviour.WRAP_CONTENT);
                } else if (getWidth() > getMinWidth()) {
                    setHorizontalDimensionBehaviour(DimensionBehaviour.FIXED);
                }
            }
            if (getVerticalDimensionBehaviour() == DimensionBehaviour.MATCH_CONSTRAINT) {
                if (getHeight() == getWrapHeight()) {
                    setVerticalDimensionBehaviour(DimensionBehaviour.WRAP_CONTENT);
                } else if (getHeight() > getMinHeight()) {
                    setVerticalDimensionBehaviour(DimensionBehaviour.FIXED);
                }
            }
        }
    }

    public void resetAnchor(ConstraintAnchor constraintAnchor) {
        if (getParent() == null || !(getParent() instanceof ConstraintWidgetContainer) || !((ConstraintWidgetContainer) getParent()).handlesInternalConstraints()) {
            ConstraintAnchor anchor = getAnchor(Type.LEFT);
            ConstraintAnchor anchor2 = getAnchor(Type.RIGHT);
            ConstraintAnchor anchor3 = getAnchor(Type.TOP);
            ConstraintAnchor anchor4 = getAnchor(Type.BOTTOM);
            ConstraintAnchor anchor5 = getAnchor(Type.CENTER);
            ConstraintAnchor anchor6 = getAnchor(Type.CENTER_X);
            ConstraintAnchor anchor7 = getAnchor(Type.CENTER_Y);
            if (constraintAnchor == anchor5) {
                if (anchor.isConnected() && anchor2.isConnected() && anchor.getTarget() == anchor2.getTarget()) {
                    anchor.reset();
                    anchor2.reset();
                }
                if (anchor3.isConnected() && anchor4.isConnected() && anchor3.getTarget() == anchor4.getTarget()) {
                    anchor3.reset();
                    anchor4.reset();
                }
                this.mHorizontalBiasPercent = 0.5f;
                this.mVerticalBiasPercent = 0.5f;
            } else if (constraintAnchor == anchor6) {
                if (anchor.isConnected() && anchor2.isConnected() && anchor.getTarget().getOwner() == anchor2.getTarget().getOwner()) {
                    anchor.reset();
                    anchor2.reset();
                }
                this.mHorizontalBiasPercent = 0.5f;
            } else if (constraintAnchor == anchor7) {
                if (anchor3.isConnected() && anchor4.isConnected() && anchor3.getTarget().getOwner() == anchor4.getTarget().getOwner()) {
                    anchor3.reset();
                    anchor4.reset();
                }
                this.mVerticalBiasPercent = 0.5f;
            } else {
                if (constraintAnchor != anchor) {
                    if (constraintAnchor != anchor2) {
                        if ((constraintAnchor == anchor3 || constraintAnchor == anchor4) && anchor3.isConnected() && anchor3.getTarget() == anchor4.getTarget()) {
                            anchor5.reset();
                        }
                    }
                }
                if (anchor.isConnected() && anchor.getTarget() == anchor2.getTarget()) {
                    anchor5.reset();
                }
            }
            constraintAnchor.reset();
        }
    }

    public void resetAnchors() {
        ConstraintWidget parent = getParent();
        if (parent == null || !(parent instanceof ConstraintWidgetContainer) || !((ConstraintWidgetContainer) getParent()).handlesInternalConstraints()) {
            int size = this.mAnchors.size();
            for (int i = 0; i < size; i++) {
                ((ConstraintAnchor) this.mAnchors.get(i)).reset();
            }
        }
    }

    public void resetAnchors(int i) {
        ConstraintWidget parent = getParent();
        if (parent == null || !(parent instanceof ConstraintWidgetContainer) || !((ConstraintWidgetContainer) getParent()).handlesInternalConstraints()) {
            int size = this.mAnchors.size();
            for (int i2 = 0; i2 < size; i2++) {
                ConstraintAnchor constraintAnchor = (ConstraintAnchor) this.mAnchors.get(i2);
                if (i == constraintAnchor.getConnectionCreator()) {
                    if (constraintAnchor.isVerticalAnchor()) {
                        setVerticalBiasPercent(DEFAULT_BIAS);
                    } else {
                        setHorizontalBiasPercent(DEFAULT_BIAS);
                    }
                    constraintAnchor.reset();
                }
            }
        }
    }

    public void disconnectWidget(ConstraintWidget constraintWidget) {
        ArrayList anchors = getAnchors();
        int size = anchors.size();
        for (int i = 0; i < size; i++) {
            ConstraintAnchor constraintAnchor = (ConstraintAnchor) anchors.get(i);
            if (constraintAnchor.isConnected() && constraintAnchor.getTarget().getOwner() == constraintWidget) {
                constraintAnchor.reset();
            }
        }
    }

    public void disconnectUnlockedWidget(ConstraintWidget constraintWidget) {
        ArrayList anchors = getAnchors();
        int size = anchors.size();
        for (int i = 0; i < size; i++) {
            ConstraintAnchor constraintAnchor = (ConstraintAnchor) anchors.get(i);
            if (constraintAnchor.isConnected() && constraintAnchor.getTarget().getOwner() == constraintWidget && constraintAnchor.getConnectionCreator() == 2) {
                constraintAnchor.reset();
            }
        }
    }

    public ConstraintAnchor getAnchor(Type type) {
        switch (type) {
            case LEFT:
                return this.mLeft;
            case TOP:
                return this.mTop;
            case RIGHT:
                return this.mRight;
            case BOTTOM:
                return this.mBottom;
            case BASELINE:
                return this.mBaseline;
            case CENTER_X:
                return this.mCenterX;
            case CENTER_Y:
                return this.mCenterY;
            case CENTER:
                return this.mCenter;
            default:
                return null;
        }
    }

    public DimensionBehaviour getHorizontalDimensionBehaviour() {
        return this.mHorizontalDimensionBehaviour;
    }

    public DimensionBehaviour getVerticalDimensionBehaviour() {
        return this.mVerticalDimensionBehaviour;
    }

    public void setHorizontalDimensionBehaviour(DimensionBehaviour dimensionBehaviour) {
        this.mHorizontalDimensionBehaviour = dimensionBehaviour;
        if (this.mHorizontalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
            setWidth(this.mWrapWidth);
        }
    }

    public void setVerticalDimensionBehaviour(DimensionBehaviour dimensionBehaviour) {
        this.mVerticalDimensionBehaviour = dimensionBehaviour;
        if (this.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
            setHeight(this.mWrapHeight);
        }
    }

    public boolean isInHorizontalChain() {
        return (this.mLeft.mTarget != null && this.mLeft.mTarget.mTarget == this.mLeft) || (this.mRight.mTarget != null && this.mRight.mTarget.mTarget == this.mRight);
    }

    public ConstraintWidget getHorizontalChainControlWidget() {
        if (!isInHorizontalChain()) {
            return null;
        }
        ConstraintWidget constraintWidget = this;
        ConstraintWidget constraintWidget2 = null;
        while (constraintWidget2 == null && constraintWidget != null) {
            ConstraintWidget constraintWidget3;
            ConstraintAnchor anchor = constraintWidget.getAnchor(Type.LEFT);
            if (anchor == null) {
                anchor = null;
            } else {
                anchor = anchor.getTarget();
            }
            if (anchor == null) {
                constraintWidget3 = null;
            } else {
                constraintWidget3 = anchor.getOwner();
            }
            if (constraintWidget3 == getParent()) {
                return constraintWidget;
            }
            ConstraintAnchor constraintAnchor;
            if (constraintWidget3 == null) {
                constraintAnchor = null;
            } else {
                constraintAnchor = constraintWidget3.getAnchor(Type.RIGHT).getTarget();
            }
            if (constraintAnchor == null || constraintAnchor.getOwner() == constraintWidget) {
                constraintWidget = constraintWidget3;
            } else {
                constraintWidget2 = constraintWidget;
            }
        }
        return constraintWidget2;
    }

    public boolean isInVerticalChain() {
        return (this.mTop.mTarget != null && this.mTop.mTarget.mTarget == this.mTop) || (this.mBottom.mTarget != null && this.mBottom.mTarget.mTarget == this.mBottom);
    }

    public ConstraintWidget getVerticalChainControlWidget() {
        if (!isInVerticalChain()) {
            return null;
        }
        ConstraintWidget constraintWidget = this;
        ConstraintWidget constraintWidget2 = null;
        while (constraintWidget2 == null && constraintWidget != null) {
            ConstraintWidget constraintWidget3;
            ConstraintAnchor anchor = constraintWidget.getAnchor(Type.TOP);
            if (anchor == null) {
                anchor = null;
            } else {
                anchor = anchor.getTarget();
            }
            if (anchor == null) {
                constraintWidget3 = null;
            } else {
                constraintWidget3 = anchor.getOwner();
            }
            if (constraintWidget3 == getParent()) {
                return constraintWidget;
            }
            ConstraintAnchor constraintAnchor;
            if (constraintWidget3 == null) {
                constraintAnchor = null;
            } else {
                constraintAnchor = constraintWidget3.getAnchor(Type.BOTTOM).getTarget();
            }
            if (constraintAnchor == null || constraintAnchor.getOwner() == constraintWidget) {
                constraintWidget = constraintWidget3;
            } else {
                constraintWidget2 = constraintWidget;
            }
        }
        return constraintWidget2;
    }

    public void addToSolver(LinearSystem linearSystem) {
        addToSolver(linearSystem, Integer.MAX_VALUE);
    }

    public void addToSolver(LinearSystem linearSystem, int i) {
        SolverVariable solverVariable;
        SolverVariable solverVariable2;
        SolverVariable solverVariable3;
        SolverVariable solverVariable4;
        SolverVariable solverVariable5;
        boolean z;
        boolean z2;
        SolverVariable createObjectVariable;
        ArrayRow createRow;
        boolean z3;
        boolean z4;
        int i2;
        int i3;
        boolean z5;
        boolean z6;
        int i4;
        float f;
        SolverVariable solverVariable6;
        int i5;
        int i6;
        boolean z7;
        float f2;
        int i7;
        Object obj;
        boolean z8;
        int i8;
        SolverVariable solverVariable7;
        SolverVariable solverVariable8;
        SolverVariable solverVariable9;
        SolverVariable solverVariable10;
        int i9;
        SolverVariable solverVariable11;
        boolean z9;
        SolverVariable createObjectVariable2;
        int i10;
        boolean z10;
        ConstraintAnchor constraintAnchor;
        int i11;
        LinearSystem linearSystem2;
        int i12;
        ConstraintAnchor constraintAnchor2;
        LinearSystem linearSystem3;
        int i13;
        SolverVariable solverVariable12;
        SolverVariable solverVariable13;
        SolverVariable solverVariable14;
        SolverVariable createObjectVariable3;
        int i14;
        ConstraintWidget constraintWidget;
        SolverVariable solverVariable15;
        SolverVariable solverVariable16;
        ArrayRow createRow2;
        ConstraintWidget constraintWidget2;
        LinearSystem linearSystem4;
        SolverVariable solverVariable17;
        int i15;
        ConstraintWidget constraintWidget3 = this;
        LinearSystem linearSystem5 = linearSystem;
        int i16 = i;
        SolverVariable solverVariable18 = null;
        if (i16 != Integer.MAX_VALUE) {
            if (constraintWidget3.mLeft.mGroup != i16) {
                solverVariable = null;
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mRight.mGroup == i16) {
                        solverVariable2 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup != i16) {
                                solverVariable3 = null;
                                if (i16 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup != i16) {
                                        solverVariable4 = null;
                                        if (i16 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBaseline.mGroup == i16) {
                                            }
                                            solverVariable5 = solverVariable18;
                                            if (constraintWidget3.mParent == null) {
                                                if (!(constraintWidget3.mLeft.mTarget == null && constraintWidget3.mLeft.mTarget.mTarget == constraintWidget3.mLeft) && (constraintWidget3.mRight.mTarget == null || constraintWidget3.mRight.mTarget.mTarget != constraintWidget3.mRight)) {
                                                    z = false;
                                                } else {
                                                    ((ConstraintWidgetContainer) constraintWidget3.mParent).addChain(constraintWidget3, 0);
                                                    z = true;
                                                }
                                                if (!(constraintWidget3.mTop.mTarget == null && constraintWidget3.mTop.mTarget.mTarget == constraintWidget3.mTop) && (constraintWidget3.mBottom.mTarget == null || constraintWidget3.mBottom.mTarget.mTarget != constraintWidget3.mBottom)) {
                                                    z2 = false;
                                                } else {
                                                    ((ConstraintWidgetContainer) constraintWidget3.mParent).addChain(constraintWidget3, 1);
                                                    z2 = true;
                                                }
                                                if (constraintWidget3.mParent.getHorizontalDimensionBehaviour() == DimensionBehaviour.WRAP_CONTENT && !z) {
                                                    if (constraintWidget3.mLeft.mTarget != null) {
                                                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                            if (constraintWidget3.mLeft.mTarget != null && constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                            }
                                                            if (constraintWidget3.mRight.mTarget != null) {
                                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                                    if (constraintWidget3.mRight.mTarget != null && constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                                    }
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mRight.mTarget != null) {
                                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                }
                                                if (constraintWidget3.mParent.getVerticalDimensionBehaviour() == DimensionBehaviour.WRAP_CONTENT && !z2) {
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            if (constraintWidget3.mTop.mTarget != null && constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            }
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    if (constraintWidget3.mBottom.mTarget != null && constraintWidget3.mBottom.mTarget.mOwner == constraintWidget3.mParent) {
                                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    }
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                }
                                                z3 = z;
                                                z4 = z2;
                                            } else {
                                                z3 = false;
                                                z4 = z3;
                                            }
                                            i2 = constraintWidget3.mWidth;
                                            if (i2 < constraintWidget3.mMinWidth) {
                                                i2 = constraintWidget3.mMinWidth;
                                            }
                                            i3 = constraintWidget3.mHeight;
                                            if (i3 < constraintWidget3.mMinHeight) {
                                                i3 = constraintWidget3.mMinHeight;
                                            }
                                            z5 = constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT;
                                            z6 = constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT;
                                            if (!(z5 || constraintWidget3.mLeft == null || constraintWidget3.mRight == null || (constraintWidget3.mLeft.mTarget != null && constraintWidget3.mRight.mTarget != null))) {
                                                z5 = true;
                                            }
                                            if (!(z6 || constraintWidget3.mTop == null || constraintWidget3.mBottom == null || ((constraintWidget3.mTop.mTarget != null && constraintWidget3.mBottom.mTarget != null) || (constraintWidget3.mBaselineDistance != 0 && (constraintWidget3.mBaseline == null || (constraintWidget3.mTop.mTarget != null && constraintWidget3.mBaseline.mTarget != null)))))) {
                                                z6 = true;
                                            }
                                            i4 = constraintWidget3.mDimensionRatioSide;
                                            f = constraintWidget3.mDimensionRatio;
                                            solverVariable6 = solverVariable4;
                                            if (constraintWidget3.mDimensionRatio > 0.0f && constraintWidget3.mVisibility != 8) {
                                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT || constraintWidget3.mVerticalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                                    SolverVariable createObjectVariable4;
                                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                                        i6 = i3;
                                                        z7 = z6;
                                                        f2 = f;
                                                        z6 = true;
                                                        i7 = 0;
                                                        obj = null;
                                                    } else if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                                        if (constraintWidget3.mDimensionRatioSide == -1) {
                                                            f = 1.0f / f;
                                                        }
                                                        i5 = i2;
                                                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                                        z6 = z5;
                                                        f2 = f;
                                                        i7 = 1;
                                                        obj = null;
                                                        z7 = true;
                                                    }
                                                    z8 = obj == null && (i7 == 0 || i7 == -1);
                                                    z5 = constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT && (constraintWidget3 instanceof ConstraintWidgetContainer);
                                                    if (constraintWidget3.mHorizontalResolution != 2 || (i16 != Integer.MAX_VALUE && (constraintWidget3.mLeft.mGroup != i16 || constraintWidget3.mRight.mGroup != i16))) {
                                                        i8 = i6;
                                                        solverVariable7 = solverVariable5;
                                                        solverVariable8 = solverVariable3;
                                                        solverVariable9 = solverVariable2;
                                                        solverVariable10 = solverVariable;
                                                        i9 = i7;
                                                        solverVariable11 = solverVariable6;
                                                        z9 = false;
                                                    } else if (!z8 || constraintWidget3.mLeft.mTarget == null || constraintWidget3.mRight.mTarget == null) {
                                                        int i17 = Integer.MAX_VALUE;
                                                        i8 = i6;
                                                        solverVariable7 = solverVariable5;
                                                        solverVariable11 = solverVariable6;
                                                        z9 = false;
                                                        solverVariable8 = solverVariable3;
                                                        solverVariable9 = solverVariable2;
                                                        solverVariable10 = solverVariable;
                                                        i9 = i7;
                                                        applyConstraints(linearSystem5, z5, z6, constraintWidget3.mLeft, constraintWidget3.mRight, constraintWidget3.mX, constraintWidget3.mX + i5, i5, constraintWidget3.mMinWidth, constraintWidget3.mHorizontalBiasPercent, z8, z3, constraintWidget3.mMatchConstraintDefaultWidth, constraintWidget3.mMatchConstraintMinWidth, constraintWidget3.mMatchConstraintMaxWidth);
                                                        constraintWidget3 = this;
                                                    } else {
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mLeft);
                                                        createObjectVariable2 = linearSystem5.createObjectVariable(constraintWidget3.mRight);
                                                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mLeft.getTarget());
                                                        createObjectVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mRight.getTarget());
                                                        linearSystem5.addGreaterThan(createObjectVariable, solverVariable18, constraintWidget3.mLeft.getMargin(), 3);
                                                        linearSystem5.addLowerThan(createObjectVariable2, createObjectVariable4, constraintWidget3.mRight.getMargin() * -1, 3);
                                                        if (z3) {
                                                            i8 = i6;
                                                            solverVariable7 = solverVariable5;
                                                            solverVariable11 = solverVariable6;
                                                            z9 = false;
                                                        } else {
                                                            i8 = i6;
                                                            z9 = false;
                                                            solverVariable7 = solverVariable5;
                                                            solverVariable11 = solverVariable6;
                                                            linearSystem5.addCentering(createObjectVariable, solverVariable18, constraintWidget3.mLeft.getMargin(), constraintWidget3.mHorizontalBiasPercent, createObjectVariable4, createObjectVariable2, constraintWidget3.mRight.getMargin(), 4);
                                                        }
                                                        solverVariable8 = solverVariable3;
                                                        solverVariable9 = solverVariable2;
                                                        solverVariable10 = solverVariable;
                                                        i9 = i7;
                                                    }
                                                    if (constraintWidget3.mVerticalResolution == 2) {
                                                        z5 = (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT || !(constraintWidget3 instanceof ConstraintWidgetContainer)) ? z9 : true;
                                                        if (obj == null) {
                                                            i10 = i9;
                                                            if (i10 == 1) {
                                                                i2 = -1;
                                                                if (i10 == -1) {
                                                                }
                                                            } else {
                                                                i2 = -1;
                                                            }
                                                            z10 = true;
                                                            SolverVariable createObjectVariable5;
                                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                                constraintAnchor = constraintWidget3.mBottom;
                                                                i11 = i;
                                                                if (i11 != Integer.MAX_VALUE) {
                                                                    if (constraintWidget3.mBottom.mGroup == i11 || constraintWidget3.mBaseline.mGroup != i11) {
                                                                        solverVariable5 = solverVariable8;
                                                                        linearSystem2 = linearSystem;
                                                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                                                            i12 = constraintWidget3.mBaselineDistance;
                                                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                                                        } else {
                                                                            constraintAnchor2 = constraintAnchor;
                                                                            i12 = i8;
                                                                        }
                                                                        if (i11 != Integer.MAX_VALUE) {
                                                                            if (constraintWidget3.mTop.mGroup == i11 || constraintAnchor2.mGroup != i11) {
                                                                                linearSystem3 = linearSystem2;
                                                                                i13 = i10;
                                                                                solverVariable12 = solverVariable11;
                                                                                solverVariable13 = solverVariable5;
                                                                            }
                                                                        }
                                                                        if (z10 || constraintWidget3.mTop.mTarget == null || constraintWidget3.mBottom.mTarget == null) {
                                                                            solverVariable14 = solverVariable5;
                                                                            i13 = i10;
                                                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                                            solverVariable12 = solverVariable11;
                                                                            solverVariable13 = solverVariable14;
                                                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                                        } else {
                                                                            LinearSystem linearSystem6;
                                                                            createObjectVariable4 = linearSystem2.createObjectVariable(constraintWidget3.mTop);
                                                                            createObjectVariable3 = linearSystem2.createObjectVariable(constraintWidget3.mBottom);
                                                                            createObjectVariable = linearSystem2.createObjectVariable(constraintWidget3.mTop.getTarget());
                                                                            createObjectVariable5 = linearSystem2.createObjectVariable(constraintWidget3.mBottom.getTarget());
                                                                            linearSystem2.addGreaterThan(createObjectVariable4, createObjectVariable, constraintWidget3.mTop.getMargin(), 3);
                                                                            linearSystem2.addLowerThan(createObjectVariable3, createObjectVariable5, i2 * constraintWidget3.mBottom.getMargin(), 3);
                                                                            if (z4) {
                                                                                solverVariable14 = solverVariable5;
                                                                                linearSystem6 = linearSystem2;
                                                                            } else {
                                                                                solverVariable14 = solverVariable5;
                                                                                linearSystem6 = linearSystem2;
                                                                                linearSystem2.addCentering(createObjectVariable4, createObjectVariable, constraintWidget3.mTop.getMargin(), constraintWidget3.mVerticalBiasPercent, createObjectVariable5, createObjectVariable3, constraintWidget3.mBottom.getMargin(), 4);
                                                                            }
                                                                            linearSystem3 = linearSystem6;
                                                                            i13 = i10;
                                                                            solverVariable12 = solverVariable11;
                                                                            solverVariable13 = solverVariable14;
                                                                        }
                                                                    }
                                                                }
                                                                solverVariable5 = solverVariable8;
                                                                linearSystem2 = linearSystem;
                                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                                    constraintAnchor2 = constraintAnchor;
                                                                    i12 = i8;
                                                                } else {
                                                                    i12 = constraintWidget3.mBaselineDistance;
                                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                                }
                                                                if (i11 != Integer.MAX_VALUE) {
                                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                                    }
                                                                    linearSystem3 = linearSystem2;
                                                                    i13 = i10;
                                                                    solverVariable12 = solverVariable11;
                                                                    solverVariable13 = solverVariable5;
                                                                }
                                                                if (z10) {
                                                                }
                                                                solverVariable14 = solverVariable5;
                                                                i13 = i10;
                                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable14;
                                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                            } else {
                                                                i13 = i10;
                                                                i14 = i8;
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable8;
                                                                i7 = i;
                                                                linearSystem3 = linearSystem;
                                                                if (i7 == Integer.MAX_VALUE) {
                                                                    constraintWidget = this;
                                                                } else if (this.mTop.mGroup == i7 && r9.mBottom.mGroup == i7) {
                                                                }
                                                                if (z10 || constraintWidget.mTop.mTarget == null || constraintWidget.mBottom.mTarget == null) {
                                                                    solverVariable15 = solverVariable12;
                                                                    solverVariable16 = solverVariable13;
                                                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                                    if (obj == null) {
                                                                        createRow2 = linearSystem.createRow();
                                                                        i3 = i;
                                                                        if (i3 == Integer.MAX_VALUE) {
                                                                            constraintWidget2 = this;
                                                                        } else if (this.mLeft.mGroup == i3 && r8.mRight.mGroup == i3) {
                                                                        }
                                                                        i4 = i13;
                                                                        if (i4 != 0) {
                                                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                                        } else {
                                                                            linearSystem4 = linearSystem;
                                                                            if (i4 != 1) {
                                                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                            } else {
                                                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                                    createObjectVariable2 = solverVariable9;
                                                                                    solverVariable17 = solverVariable10;
                                                                                    i15 = 3;
                                                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                                } else {
                                                                                    createObjectVariable2 = solverVariable9;
                                                                                    solverVariable17 = solverVariable10;
                                                                                    i15 = 3;
                                                                                }
                                                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                                    solverVariable5 = solverVariable15;
                                                                                    createObjectVariable3 = solverVariable16;
                                                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                                } else {
                                                                                    solverVariable5 = solverVariable15;
                                                                                    createObjectVariable3 = solverVariable16;
                                                                                }
                                                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                                createObjectVariable = linearSystem.createErrorVariable();
                                                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                                                createObjectVariable.strength = 4;
                                                                                createObjectVariable2.strength = 4;
                                                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                                linearSystem4.addConstraint(createRow2);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        constraintWidget2 = this;
                                                                    }
                                                                }
                                                                createObjectVariable4 = linearSystem3.createObjectVariable(constraintWidget.mTop);
                                                                createObjectVariable3 = linearSystem3.createObjectVariable(constraintWidget.mBottom);
                                                                createObjectVariable = linearSystem3.createObjectVariable(constraintWidget.mTop.getTarget());
                                                                createObjectVariable5 = linearSystem3.createObjectVariable(constraintWidget.mBottom.getTarget());
                                                                linearSystem3.addGreaterThan(createObjectVariable4, createObjectVariable, constraintWidget.mTop.getMargin(), 3);
                                                                linearSystem3.addLowerThan(createObjectVariable3, createObjectVariable5, i2 * constraintWidget.mBottom.getMargin(), 3);
                                                                if (!z4) {
                                                                    linearSystem3.addCentering(createObjectVariable4, createObjectVariable, constraintWidget.mTop.getMargin(), constraintWidget.mVerticalBiasPercent, createObjectVariable5, createObjectVariable3, constraintWidget.mBottom.getMargin(), 4);
                                                                }
                                                            }
                                                            solverVariable15 = solverVariable12;
                                                            solverVariable16 = solverVariable13;
                                                            if (obj == null) {
                                                                constraintWidget2 = this;
                                                            } else {
                                                                createRow2 = linearSystem.createRow();
                                                                i3 = i;
                                                                if (i3 == Integer.MAX_VALUE) {
                                                                    constraintWidget2 = this;
                                                                }
                                                                i4 = i13;
                                                                if (i4 != 0) {
                                                                    linearSystem4 = linearSystem;
                                                                    if (i4 != 1) {
                                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                        } else {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                        }
                                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                        } else {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                        }
                                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                                        createObjectVariable.strength = 4;
                                                                        createObjectVariable2.strength = 4;
                                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                        linearSystem4.addConstraint(createRow2);
                                                                    } else {
                                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                    }
                                                                } else {
                                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                                }
                                                            }
                                                        }
                                                        i10 = i9;
                                                        i2 = -1;
                                                        z10 = z9;
                                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                                            i13 = i10;
                                                            i14 = i8;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable8;
                                                            i7 = i;
                                                            linearSystem3 = linearSystem;
                                                            if (i7 == Integer.MAX_VALUE) {
                                                                constraintWidget = this;
                                                            }
                                                            if (z10) {
                                                            }
                                                            solverVariable15 = solverVariable12;
                                                            solverVariable16 = solverVariable13;
                                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                            if (obj == null) {
                                                                createRow2 = linearSystem.createRow();
                                                                i3 = i;
                                                                if (i3 == Integer.MAX_VALUE) {
                                                                    constraintWidget2 = this;
                                                                }
                                                                i4 = i13;
                                                                if (i4 != 0) {
                                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                                } else {
                                                                    linearSystem4 = linearSystem;
                                                                    if (i4 != 1) {
                                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                    } else {
                                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                        } else {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                        }
                                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                        } else {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                        }
                                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                                        createObjectVariable.strength = 4;
                                                                        createObjectVariable2.strength = 4;
                                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                        linearSystem4.addConstraint(createRow2);
                                                                    }
                                                                }
                                                            } else {
                                                                constraintWidget2 = this;
                                                            }
                                                        }
                                                        constraintAnchor = constraintWidget3.mBottom;
                                                        i11 = i;
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                                            }
                                                            solverVariable5 = solverVariable8;
                                                            linearSystem2 = linearSystem;
                                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                                i12 = constraintWidget3.mBaselineDistance;
                                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                                            } else {
                                                                constraintAnchor2 = constraintAnchor;
                                                                i12 = i8;
                                                            }
                                                            if (i11 != Integer.MAX_VALUE) {
                                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                                }
                                                                linearSystem3 = linearSystem2;
                                                                i13 = i10;
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable5;
                                                            }
                                                            if (z10) {
                                                            }
                                                            solverVariable14 = solverVariable5;
                                                            i13 = i10;
                                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable14;
                                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                        }
                                                        solverVariable5 = solverVariable8;
                                                        linearSystem2 = linearSystem;
                                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                                            constraintAnchor2 = constraintAnchor;
                                                            i12 = i8;
                                                        } else {
                                                            i12 = constraintWidget3.mBaselineDistance;
                                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                                        }
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mTop.mGroup == i11) {
                                                            }
                                                            linearSystem3 = linearSystem2;
                                                            i13 = i10;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable5;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable14 = solverVariable5;
                                                        i13 = i10;
                                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable14;
                                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                        solverVariable15 = solverVariable12;
                                                        solverVariable16 = solverVariable13;
                                                        if (obj == null) {
                                                            constraintWidget2 = this;
                                                        } else {
                                                            createRow2 = linearSystem.createRow();
                                                            i3 = i;
                                                            if (i3 == Integer.MAX_VALUE) {
                                                                constraintWidget2 = this;
                                                            }
                                                            i4 = i13;
                                                            if (i4 != 0) {
                                                                linearSystem4 = linearSystem;
                                                                if (i4 != 1) {
                                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                    } else {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                    }
                                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                    } else {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                    }
                                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                                    createObjectVariable.strength = 4;
                                                                    createObjectVariable2.strength = 4;
                                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                    linearSystem4.addConstraint(createRow2);
                                                                } else {
                                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                }
                                                            } else {
                                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                            }
                                                        }
                                                    }
                                                }
                                                if (z5 && !z6) {
                                                    i5 = i2;
                                                    i6 = i3;
                                                    z7 = z6;
                                                    f2 = f;
                                                    i7 = 0;
                                                } else if (z5 || !z6) {
                                                    i5 = i2;
                                                    i6 = i3;
                                                    z7 = z6;
                                                    i7 = i4;
                                                    f2 = f;
                                                } else {
                                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                                        i5 = i2;
                                                        i6 = i3;
                                                        z7 = z6;
                                                        f2 = 1.0f / f;
                                                    } else {
                                                        i5 = i2;
                                                        i6 = i3;
                                                        z7 = z6;
                                                        f2 = f;
                                                    }
                                                    i7 = 1;
                                                }
                                                obj = 1;
                                                z6 = z5;
                                                if (obj == null) {
                                                }
                                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                                }
                                                if (constraintWidget3.mHorizontalResolution != 2) {
                                                }
                                                i8 = i6;
                                                solverVariable7 = solverVariable5;
                                                solverVariable8 = solverVariable3;
                                                solverVariable9 = solverVariable2;
                                                solverVariable10 = solverVariable;
                                                i9 = i7;
                                                solverVariable11 = solverVariable6;
                                                z9 = false;
                                                if (constraintWidget3.mVerticalResolution == 2) {
                                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                                    }
                                                    if (obj == null) {
                                                        i10 = i9;
                                                        i2 = -1;
                                                    } else {
                                                        i10 = i9;
                                                        if (i10 == 1) {
                                                            i2 = -1;
                                                        } else {
                                                            i2 = -1;
                                                            if (i10 == -1) {
                                                            }
                                                        }
                                                        z10 = true;
                                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                                            constraintAnchor = constraintWidget3.mBottom;
                                                            i11 = i;
                                                            if (i11 != Integer.MAX_VALUE) {
                                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                                }
                                                                solverVariable5 = solverVariable8;
                                                                linearSystem2 = linearSystem;
                                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                                    i12 = constraintWidget3.mBaselineDistance;
                                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                                } else {
                                                                    constraintAnchor2 = constraintAnchor;
                                                                    i12 = i8;
                                                                }
                                                                if (i11 != Integer.MAX_VALUE) {
                                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                                    }
                                                                    linearSystem3 = linearSystem2;
                                                                    i13 = i10;
                                                                    solverVariable12 = solverVariable11;
                                                                    solverVariable13 = solverVariable5;
                                                                }
                                                                if (z10) {
                                                                }
                                                                solverVariable14 = solverVariable5;
                                                                i13 = i10;
                                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable14;
                                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                            }
                                                            solverVariable5 = solverVariable8;
                                                            linearSystem2 = linearSystem;
                                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                                constraintAnchor2 = constraintAnchor;
                                                                i12 = i8;
                                                            } else {
                                                                i12 = constraintWidget3.mBaselineDistance;
                                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                                            }
                                                            if (i11 != Integer.MAX_VALUE) {
                                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                                }
                                                                linearSystem3 = linearSystem2;
                                                                i13 = i10;
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable5;
                                                            }
                                                            if (z10) {
                                                            }
                                                            solverVariable14 = solverVariable5;
                                                            i13 = i10;
                                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable14;
                                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                        } else {
                                                            i13 = i10;
                                                            i14 = i8;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable8;
                                                            i7 = i;
                                                            linearSystem3 = linearSystem;
                                                            if (i7 == Integer.MAX_VALUE) {
                                                                constraintWidget = this;
                                                            }
                                                            if (z10) {
                                                            }
                                                            solverVariable15 = solverVariable12;
                                                            solverVariable16 = solverVariable13;
                                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                            if (obj == null) {
                                                                createRow2 = linearSystem.createRow();
                                                                i3 = i;
                                                                if (i3 == Integer.MAX_VALUE) {
                                                                    constraintWidget2 = this;
                                                                }
                                                                i4 = i13;
                                                                if (i4 != 0) {
                                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                                } else {
                                                                    linearSystem4 = linearSystem;
                                                                    if (i4 != 1) {
                                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                    } else {
                                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                        } else {
                                                                            createObjectVariable2 = solverVariable9;
                                                                            solverVariable17 = solverVariable10;
                                                                            i15 = 3;
                                                                        }
                                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                        } else {
                                                                            solverVariable5 = solverVariable15;
                                                                            createObjectVariable3 = solverVariable16;
                                                                        }
                                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                                        createObjectVariable.strength = 4;
                                                                        createObjectVariable2.strength = 4;
                                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                        linearSystem4.addConstraint(createRow2);
                                                                    }
                                                                }
                                                            } else {
                                                                constraintWidget2 = this;
                                                            }
                                                        }
                                                        solverVariable15 = solverVariable12;
                                                        solverVariable16 = solverVariable13;
                                                        if (obj == null) {
                                                            constraintWidget2 = this;
                                                        } else {
                                                            createRow2 = linearSystem.createRow();
                                                            i3 = i;
                                                            if (i3 == Integer.MAX_VALUE) {
                                                                constraintWidget2 = this;
                                                            }
                                                            i4 = i13;
                                                            if (i4 != 0) {
                                                                linearSystem4 = linearSystem;
                                                                if (i4 != 1) {
                                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                    } else {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                    }
                                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                    } else {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                    }
                                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                                    createObjectVariable.strength = 4;
                                                                    createObjectVariable2.strength = 4;
                                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                    linearSystem4.addConstraint(createRow2);
                                                                } else {
                                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                }
                                                            } else {
                                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                            }
                                                        }
                                                    }
                                                    z10 = z9;
                                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                                        i13 = i10;
                                                        i14 = i8;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable8;
                                                        i7 = i;
                                                        linearSystem3 = linearSystem;
                                                        if (i7 == Integer.MAX_VALUE) {
                                                            constraintWidget = this;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable15 = solverVariable12;
                                                        solverVariable16 = solverVariable13;
                                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                        if (obj == null) {
                                                            createRow2 = linearSystem.createRow();
                                                            i3 = i;
                                                            if (i3 == Integer.MAX_VALUE) {
                                                                constraintWidget2 = this;
                                                            }
                                                            i4 = i13;
                                                            if (i4 != 0) {
                                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                            } else {
                                                                linearSystem4 = linearSystem;
                                                                if (i4 != 1) {
                                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                } else {
                                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                    } else {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                    }
                                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                    } else {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                    }
                                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                                    createObjectVariable.strength = 4;
                                                                    createObjectVariable2.strength = 4;
                                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                    linearSystem4.addConstraint(createRow2);
                                                                }
                                                            }
                                                        } else {
                                                            constraintWidget2 = this;
                                                        }
                                                    }
                                                    constraintAnchor = constraintWidget3.mBottom;
                                                    i11 = i;
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                                        }
                                                        solverVariable5 = solverVariable8;
                                                        linearSystem2 = linearSystem;
                                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                                            i12 = constraintWidget3.mBaselineDistance;
                                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                                        } else {
                                                            constraintAnchor2 = constraintAnchor;
                                                            i12 = i8;
                                                        }
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mTop.mGroup == i11) {
                                                            }
                                                            linearSystem3 = linearSystem2;
                                                            i13 = i10;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable5;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable14 = solverVariable5;
                                                        i13 = i10;
                                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable14;
                                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    } else {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                    solverVariable15 = solverVariable12;
                                                    solverVariable16 = solverVariable13;
                                                    if (obj == null) {
                                                        constraintWidget2 = this;
                                                    } else {
                                                        createRow2 = linearSystem.createRow();
                                                        i3 = i;
                                                        if (i3 == Integer.MAX_VALUE) {
                                                            constraintWidget2 = this;
                                                        }
                                                        i4 = i13;
                                                        if (i4 != 0) {
                                                            linearSystem4 = linearSystem;
                                                            if (i4 != 1) {
                                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                } else {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                }
                                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                } else {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                }
                                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                createObjectVariable = linearSystem.createErrorVariable();
                                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                                createObjectVariable.strength = 4;
                                                                createObjectVariable2.strength = 4;
                                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                linearSystem4.addConstraint(createRow2);
                                                            } else {
                                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                            }
                                                        } else {
                                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                        }
                                                    }
                                                }
                                            }
                                            i5 = i2;
                                            i6 = i3;
                                            z7 = z6;
                                            i7 = i4;
                                            f2 = f;
                                            obj = null;
                                            z6 = z5;
                                            if (obj == null) {
                                            }
                                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                            }
                                            if (constraintWidget3.mHorizontalResolution != 2) {
                                            }
                                            i8 = i6;
                                            solverVariable7 = solverVariable5;
                                            solverVariable8 = solverVariable3;
                                            solverVariable9 = solverVariable2;
                                            solverVariable10 = solverVariable;
                                            i9 = i7;
                                            solverVariable11 = solverVariable6;
                                            z9 = false;
                                            if (constraintWidget3.mVerticalResolution == 2) {
                                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                                }
                                                if (obj == null) {
                                                    i10 = i9;
                                                    if (i10 == 1) {
                                                        i2 = -1;
                                                        if (i10 == -1) {
                                                        }
                                                    } else {
                                                        i2 = -1;
                                                    }
                                                    z10 = true;
                                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                                        constraintAnchor = constraintWidget3.mBottom;
                                                        i11 = i;
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                                            }
                                                            solverVariable5 = solverVariable8;
                                                            linearSystem2 = linearSystem;
                                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                                i12 = constraintWidget3.mBaselineDistance;
                                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                                            } else {
                                                                constraintAnchor2 = constraintAnchor;
                                                                i12 = i8;
                                                            }
                                                            if (i11 != Integer.MAX_VALUE) {
                                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                                }
                                                                linearSystem3 = linearSystem2;
                                                                i13 = i10;
                                                                solverVariable12 = solverVariable11;
                                                                solverVariable13 = solverVariable5;
                                                            }
                                                            if (z10) {
                                                            }
                                                            solverVariable14 = solverVariable5;
                                                            i13 = i10;
                                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable14;
                                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                        }
                                                        solverVariable5 = solverVariable8;
                                                        linearSystem2 = linearSystem;
                                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                                            constraintAnchor2 = constraintAnchor;
                                                            i12 = i8;
                                                        } else {
                                                            i12 = constraintWidget3.mBaselineDistance;
                                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                                        }
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mTop.mGroup == i11) {
                                                            }
                                                            linearSystem3 = linearSystem2;
                                                            i13 = i10;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable5;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable14 = solverVariable5;
                                                        i13 = i10;
                                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable14;
                                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                    } else {
                                                        i13 = i10;
                                                        i14 = i8;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable8;
                                                        i7 = i;
                                                        linearSystem3 = linearSystem;
                                                        if (i7 == Integer.MAX_VALUE) {
                                                            constraintWidget = this;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable15 = solverVariable12;
                                                        solverVariable16 = solverVariable13;
                                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                        if (obj == null) {
                                                            createRow2 = linearSystem.createRow();
                                                            i3 = i;
                                                            if (i3 == Integer.MAX_VALUE) {
                                                                constraintWidget2 = this;
                                                            }
                                                            i4 = i13;
                                                            if (i4 != 0) {
                                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                            } else {
                                                                linearSystem4 = linearSystem;
                                                                if (i4 != 1) {
                                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                                } else {
                                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                    } else {
                                                                        createObjectVariable2 = solverVariable9;
                                                                        solverVariable17 = solverVariable10;
                                                                        i15 = 3;
                                                                    }
                                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                    } else {
                                                                        solverVariable5 = solverVariable15;
                                                                        createObjectVariable3 = solverVariable16;
                                                                    }
                                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                                    createObjectVariable.strength = 4;
                                                                    createObjectVariable2.strength = 4;
                                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                    linearSystem4.addConstraint(createRow2);
                                                                }
                                                            }
                                                        } else {
                                                            constraintWidget2 = this;
                                                        }
                                                    }
                                                    solverVariable15 = solverVariable12;
                                                    solverVariable16 = solverVariable13;
                                                    if (obj == null) {
                                                        constraintWidget2 = this;
                                                    } else {
                                                        createRow2 = linearSystem.createRow();
                                                        i3 = i;
                                                        if (i3 == Integer.MAX_VALUE) {
                                                            constraintWidget2 = this;
                                                        }
                                                        i4 = i13;
                                                        if (i4 != 0) {
                                                            linearSystem4 = linearSystem;
                                                            if (i4 != 1) {
                                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                } else {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                }
                                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                } else {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                }
                                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                createObjectVariable = linearSystem.createErrorVariable();
                                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                                createObjectVariable.strength = 4;
                                                                createObjectVariable2.strength = 4;
                                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                linearSystem4.addConstraint(createRow2);
                                                            } else {
                                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                            }
                                                        } else {
                                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                        }
                                                    }
                                                }
                                                i10 = i9;
                                                i2 = -1;
                                                z10 = z9;
                                                if (constraintWidget3.mBaselineDistance <= 0) {
                                                    i13 = i10;
                                                    i14 = i8;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable8;
                                                    i7 = i;
                                                    linearSystem3 = linearSystem;
                                                    if (i7 == Integer.MAX_VALUE) {
                                                        constraintWidget = this;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable15 = solverVariable12;
                                                    solverVariable16 = solverVariable13;
                                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                    if (obj == null) {
                                                        createRow2 = linearSystem.createRow();
                                                        i3 = i;
                                                        if (i3 == Integer.MAX_VALUE) {
                                                            constraintWidget2 = this;
                                                        }
                                                        i4 = i13;
                                                        if (i4 != 0) {
                                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                        } else {
                                                            linearSystem4 = linearSystem;
                                                            if (i4 != 1) {
                                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                            } else {
                                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                } else {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                }
                                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                } else {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                }
                                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                createObjectVariable = linearSystem.createErrorVariable();
                                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                                createObjectVariable.strength = 4;
                                                                createObjectVariable2.strength = 4;
                                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                linearSystem4.addConstraint(createRow2);
                                                            }
                                                        }
                                                    } else {
                                                        constraintWidget2 = this;
                                                    }
                                                }
                                                constraintAnchor = constraintWidget3.mBottom;
                                                i11 = i;
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    } else {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                } else {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                if (obj == null) {
                                                    constraintWidget2 = this;
                                                } else {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        } else {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        }
                                                    } else {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    }
                                                }
                                            }
                                        }
                                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                                        solverVariable5 = solverVariable18;
                                        if (constraintWidget3.mParent == null) {
                                            z3 = false;
                                            z4 = z3;
                                        } else {
                                            if (constraintWidget3.mLeft.mTarget == null) {
                                            }
                                            z = false;
                                            if (constraintWidget3.mTop.mTarget == null) {
                                            }
                                            z2 = false;
                                            if (constraintWidget3.mLeft.mTarget != null) {
                                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mRight.mTarget != null) {
                                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mTop.mTarget != null) {
                                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                            z3 = z;
                                                                            z4 = z2;
                                                                        }
                                                                    }
                                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                                    createRow = linearSystem.createRow();
                                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                                    linearSystem5.addConstraint(createRow);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mRight.mTarget != null) {
                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                        i2 = constraintWidget3.mWidth;
                                        if (i2 < constraintWidget3.mMinWidth) {
                                            i2 = constraintWidget3.mMinWidth;
                                        }
                                        i3 = constraintWidget3.mHeight;
                                        if (i3 < constraintWidget3.mMinHeight) {
                                            i3 = constraintWidget3.mMinHeight;
                                        }
                                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        }
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        }
                                        z5 = true;
                                        z6 = true;
                                        i4 = constraintWidget3.mDimensionRatioSide;
                                        f = constraintWidget3.mDimensionRatio;
                                        solverVariable6 = solverVariable4;
                                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        }
                                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                                    f = 1.0f / f;
                                                }
                                                i5 = i2;
                                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                                z6 = z5;
                                                f2 = f;
                                                i7 = 1;
                                                obj = null;
                                                z7 = true;
                                            }
                                            i5 = i2;
                                            i6 = i3;
                                            z7 = z6;
                                            i7 = i4;
                                            f2 = f;
                                            obj = null;
                                            z6 = z5;
                                        } else {
                                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                            i6 = i3;
                                            z7 = z6;
                                            f2 = f;
                                            z6 = true;
                                            i7 = 0;
                                            obj = null;
                                        }
                                        if (obj == null) {
                                        }
                                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                        }
                                        if (constraintWidget3.mHorizontalResolution != 2) {
                                        }
                                        i8 = i6;
                                        solverVariable7 = solverVariable5;
                                        solverVariable8 = solverVariable3;
                                        solverVariable9 = solverVariable2;
                                        solverVariable10 = solverVariable;
                                        i9 = i7;
                                        solverVariable11 = solverVariable6;
                                        z9 = false;
                                        if (constraintWidget3.mVerticalResolution == 2) {
                                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                            }
                                            if (obj == null) {
                                                i10 = i9;
                                                i2 = -1;
                                            } else {
                                                i10 = i9;
                                                if (i10 == 1) {
                                                    i2 = -1;
                                                } else {
                                                    i2 = -1;
                                                    if (i10 == -1) {
                                                    }
                                                }
                                                z10 = true;
                                                if (constraintWidget3.mBaselineDistance <= 0) {
                                                    constraintAnchor = constraintWidget3.mBottom;
                                                    i11 = i;
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                                        }
                                                        solverVariable5 = solverVariable8;
                                                        linearSystem2 = linearSystem;
                                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                                            i12 = constraintWidget3.mBaselineDistance;
                                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                                        } else {
                                                            constraintAnchor2 = constraintAnchor;
                                                            i12 = i8;
                                                        }
                                                        if (i11 != Integer.MAX_VALUE) {
                                                            if (constraintWidget3.mTop.mGroup == i11) {
                                                            }
                                                            linearSystem3 = linearSystem2;
                                                            i13 = i10;
                                                            solverVariable12 = solverVariable11;
                                                            solverVariable13 = solverVariable5;
                                                        }
                                                        if (z10) {
                                                        }
                                                        solverVariable14 = solverVariable5;
                                                        i13 = i10;
                                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable14;
                                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    } else {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                } else {
                                                    i13 = i10;
                                                    i14 = i8;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable8;
                                                    i7 = i;
                                                    linearSystem3 = linearSystem;
                                                    if (i7 == Integer.MAX_VALUE) {
                                                        constraintWidget = this;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable15 = solverVariable12;
                                                    solverVariable16 = solverVariable13;
                                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                    if (obj == null) {
                                                        createRow2 = linearSystem.createRow();
                                                        i3 = i;
                                                        if (i3 == Integer.MAX_VALUE) {
                                                            constraintWidget2 = this;
                                                        }
                                                        i4 = i13;
                                                        if (i4 != 0) {
                                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                        } else {
                                                            linearSystem4 = linearSystem;
                                                            if (i4 != 1) {
                                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                            } else {
                                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                                } else {
                                                                    createObjectVariable2 = solverVariable9;
                                                                    solverVariable17 = solverVariable10;
                                                                    i15 = 3;
                                                                }
                                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                                } else {
                                                                    solverVariable5 = solverVariable15;
                                                                    createObjectVariable3 = solverVariable16;
                                                                }
                                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                                createObjectVariable = linearSystem.createErrorVariable();
                                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                                createObjectVariable.strength = 4;
                                                                createObjectVariable2.strength = 4;
                                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                                linearSystem4.addConstraint(createRow2);
                                                            }
                                                        }
                                                    } else {
                                                        constraintWidget2 = this;
                                                    }
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                if (obj == null) {
                                                    constraintWidget2 = this;
                                                } else {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        } else {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        }
                                                    } else {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    }
                                                }
                                            }
                                            z10 = z9;
                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                i13 = i10;
                                                i14 = i8;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable8;
                                                i7 = i;
                                                linearSystem3 = linearSystem;
                                                if (i7 == Integer.MAX_VALUE) {
                                                    constraintWidget = this;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                if (obj == null) {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    } else {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        } else {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        }
                                                    }
                                                } else {
                                                    constraintWidget2 = this;
                                                }
                                            }
                                            constraintAnchor = constraintWidget3.mBottom;
                                            i11 = i;
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                } else {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            } else {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            if (obj == null) {
                                                constraintWidget2 = this;
                                            } else {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    } else {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    }
                                                } else {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                }
                                            }
                                        }
                                    }
                                }
                                solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                                if (i16 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBaseline.mGroup == i16) {
                                    }
                                    solverVariable5 = solverVariable18;
                                    if (constraintWidget3.mParent == null) {
                                        if (constraintWidget3.mLeft.mTarget == null) {
                                        }
                                        z = false;
                                        if (constraintWidget3.mTop.mTarget == null) {
                                        }
                                        z2 = false;
                                        if (constraintWidget3.mLeft.mTarget != null) {
                                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mRight.mTarget != null) {
                                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mTop.mTarget != null) {
                                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                        z3 = z;
                                                                        z4 = z2;
                                                                    }
                                                                }
                                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                                createRow = linearSystem.createRow();
                                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                                linearSystem5.addConstraint(createRow);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    } else {
                                        z3 = false;
                                        z4 = z3;
                                    }
                                    i2 = constraintWidget3.mWidth;
                                    if (i2 < constraintWidget3.mMinWidth) {
                                        i2 = constraintWidget3.mMinWidth;
                                    }
                                    i3 = constraintWidget3.mHeight;
                                    if (i3 < constraintWidget3.mMinHeight) {
                                        i3 = constraintWidget3.mMinHeight;
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    z5 = true;
                                    z6 = true;
                                    i4 = constraintWidget3.mDimensionRatioSide;
                                    f = constraintWidget3.mDimensionRatio;
                                    solverVariable6 = solverVariable4;
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                        i6 = i3;
                                        z7 = z6;
                                        f2 = f;
                                        z6 = true;
                                        i7 = 0;
                                        obj = null;
                                    } else {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                                f = 1.0f / f;
                                            }
                                            i5 = i2;
                                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                            z6 = z5;
                                            f2 = f;
                                            i7 = 1;
                                            obj = null;
                                            z7 = true;
                                        }
                                        i5 = i2;
                                        i6 = i3;
                                        z7 = z6;
                                        i7 = i4;
                                        f2 = f;
                                        obj = null;
                                        z6 = z5;
                                    }
                                    if (obj == null) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (constraintWidget3.mHorizontalResolution != 2) {
                                    }
                                    i8 = i6;
                                    solverVariable7 = solverVariable5;
                                    solverVariable8 = solverVariable3;
                                    solverVariable9 = solverVariable2;
                                    solverVariable10 = solverVariable;
                                    i9 = i7;
                                    solverVariable11 = solverVariable6;
                                    z9 = false;
                                    if (constraintWidget3.mVerticalResolution == 2) {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                        }
                                        if (obj == null) {
                                            i10 = i9;
                                            if (i10 == 1) {
                                                i2 = -1;
                                                if (i10 == -1) {
                                                }
                                            } else {
                                                i2 = -1;
                                            }
                                            z10 = true;
                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                constraintAnchor = constraintWidget3.mBottom;
                                                i11 = i;
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    } else {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                } else {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            } else {
                                                i13 = i10;
                                                i14 = i8;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable8;
                                                i7 = i;
                                                linearSystem3 = linearSystem;
                                                if (i7 == Integer.MAX_VALUE) {
                                                    constraintWidget = this;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                if (obj == null) {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    } else {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        } else {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        }
                                                    }
                                                } else {
                                                    constraintWidget2 = this;
                                                }
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            if (obj == null) {
                                                constraintWidget2 = this;
                                            } else {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    } else {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    }
                                                } else {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                }
                                            }
                                        }
                                        i10 = i9;
                                        i2 = -1;
                                        z10 = z9;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                }
                                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                                solverVariable5 = solverVariable18;
                                if (constraintWidget3.mParent == null) {
                                    z3 = false;
                                    z4 = z3;
                                } else {
                                    if (constraintWidget3.mLeft.mTarget == null) {
                                    }
                                    z = false;
                                    if (constraintWidget3.mTop.mTarget == null) {
                                    }
                                    z2 = false;
                                    if (constraintWidget3.mLeft.mTarget != null) {
                                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mRight.mTarget != null) {
                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                                i2 = constraintWidget3.mWidth;
                                if (i2 < constraintWidget3.mMinWidth) {
                                    i2 = constraintWidget3.mMinWidth;
                                }
                                i3 = constraintWidget3.mHeight;
                                if (i3 < constraintWidget3.mMinHeight) {
                                    i3 = constraintWidget3.mMinHeight;
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                z5 = true;
                                z6 = true;
                                i4 = constraintWidget3.mDimensionRatioSide;
                                f = constraintWidget3.mDimensionRatio;
                                solverVariable6 = solverVariable4;
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        if (constraintWidget3.mDimensionRatioSide == -1) {
                                            f = 1.0f / f;
                                        }
                                        i5 = i2;
                                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                        z6 = z5;
                                        f2 = f;
                                        i7 = 1;
                                        obj = null;
                                        z7 = true;
                                    }
                                    i5 = i2;
                                    i6 = i3;
                                    z7 = z6;
                                    i7 = i4;
                                    f2 = f;
                                    obj = null;
                                    z6 = z5;
                                } else {
                                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                    i6 = i3;
                                    z7 = z6;
                                    f2 = f;
                                    z6 = true;
                                    i7 = 0;
                                    obj = null;
                                }
                                if (obj == null) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (constraintWidget3.mHorizontalResolution != 2) {
                                }
                                i8 = i6;
                                solverVariable7 = solverVariable5;
                                solverVariable8 = solverVariable3;
                                solverVariable9 = solverVariable2;
                                solverVariable10 = solverVariable;
                                i9 = i7;
                                solverVariable11 = solverVariable6;
                                z9 = false;
                                if (constraintWidget3.mVerticalResolution == 2) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (obj == null) {
                                        i10 = i9;
                                        i2 = -1;
                                    } else {
                                        i10 = i9;
                                        if (i10 == 1) {
                                            i2 = -1;
                                        } else {
                                            i2 = -1;
                                            if (i10 == -1) {
                                            }
                                        }
                                        z10 = true;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            constraintAnchor = constraintWidget3.mBottom;
                                            i11 = i;
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                } else {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            } else {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        } else {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                    z10 = z9;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                            }
                        }
                        solverVariable3 = linearSystem5.createObjectVariable(constraintWidget3.mTop);
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup != i16) {
                                solverVariable4 = null;
                                if (i16 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBaseline.mGroup == i16) {
                                    }
                                    solverVariable5 = solverVariable18;
                                    if (constraintWidget3.mParent == null) {
                                        if (constraintWidget3.mLeft.mTarget == null) {
                                        }
                                        z = false;
                                        if (constraintWidget3.mTop.mTarget == null) {
                                        }
                                        z2 = false;
                                        if (constraintWidget3.mLeft.mTarget != null) {
                                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mRight.mTarget != null) {
                                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mTop.mTarget != null) {
                                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                        z3 = z;
                                                                        z4 = z2;
                                                                    }
                                                                }
                                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                                createRow = linearSystem.createRow();
                                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                                linearSystem5.addConstraint(createRow);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    } else {
                                        z3 = false;
                                        z4 = z3;
                                    }
                                    i2 = constraintWidget3.mWidth;
                                    if (i2 < constraintWidget3.mMinWidth) {
                                        i2 = constraintWidget3.mMinWidth;
                                    }
                                    i3 = constraintWidget3.mHeight;
                                    if (i3 < constraintWidget3.mMinHeight) {
                                        i3 = constraintWidget3.mMinHeight;
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    z5 = true;
                                    z6 = true;
                                    i4 = constraintWidget3.mDimensionRatioSide;
                                    f = constraintWidget3.mDimensionRatio;
                                    solverVariable6 = solverVariable4;
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                        i6 = i3;
                                        z7 = z6;
                                        f2 = f;
                                        z6 = true;
                                        i7 = 0;
                                        obj = null;
                                    } else {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                                f = 1.0f / f;
                                            }
                                            i5 = i2;
                                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                            z6 = z5;
                                            f2 = f;
                                            i7 = 1;
                                            obj = null;
                                            z7 = true;
                                        }
                                        i5 = i2;
                                        i6 = i3;
                                        z7 = z6;
                                        i7 = i4;
                                        f2 = f;
                                        obj = null;
                                        z6 = z5;
                                    }
                                    if (obj == null) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (constraintWidget3.mHorizontalResolution != 2) {
                                    }
                                    i8 = i6;
                                    solverVariable7 = solverVariable5;
                                    solverVariable8 = solverVariable3;
                                    solverVariable9 = solverVariable2;
                                    solverVariable10 = solverVariable;
                                    i9 = i7;
                                    solverVariable11 = solverVariable6;
                                    z9 = false;
                                    if (constraintWidget3.mVerticalResolution == 2) {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                        }
                                        if (obj == null) {
                                            i10 = i9;
                                            if (i10 == 1) {
                                                i2 = -1;
                                                if (i10 == -1) {
                                                }
                                            } else {
                                                i2 = -1;
                                            }
                                            z10 = true;
                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                constraintAnchor = constraintWidget3.mBottom;
                                                i11 = i;
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    } else {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                } else {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            } else {
                                                i13 = i10;
                                                i14 = i8;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable8;
                                                i7 = i;
                                                linearSystem3 = linearSystem;
                                                if (i7 == Integer.MAX_VALUE) {
                                                    constraintWidget = this;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                if (obj == null) {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    } else {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        } else {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        }
                                                    }
                                                } else {
                                                    constraintWidget2 = this;
                                                }
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            if (obj == null) {
                                                constraintWidget2 = this;
                                            } else {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    } else {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    }
                                                } else {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                }
                                            }
                                        }
                                        i10 = i9;
                                        i2 = -1;
                                        z10 = z9;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                }
                                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                                solverVariable5 = solverVariable18;
                                if (constraintWidget3.mParent == null) {
                                    z3 = false;
                                    z4 = z3;
                                } else {
                                    if (constraintWidget3.mLeft.mTarget == null) {
                                    }
                                    z = false;
                                    if (constraintWidget3.mTop.mTarget == null) {
                                    }
                                    z2 = false;
                                    if (constraintWidget3.mLeft.mTarget != null) {
                                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mRight.mTarget != null) {
                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                                i2 = constraintWidget3.mWidth;
                                if (i2 < constraintWidget3.mMinWidth) {
                                    i2 = constraintWidget3.mMinWidth;
                                }
                                i3 = constraintWidget3.mHeight;
                                if (i3 < constraintWidget3.mMinHeight) {
                                    i3 = constraintWidget3.mMinHeight;
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                z5 = true;
                                z6 = true;
                                i4 = constraintWidget3.mDimensionRatioSide;
                                f = constraintWidget3.mDimensionRatio;
                                solverVariable6 = solverVariable4;
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        if (constraintWidget3.mDimensionRatioSide == -1) {
                                            f = 1.0f / f;
                                        }
                                        i5 = i2;
                                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                        z6 = z5;
                                        f2 = f;
                                        i7 = 1;
                                        obj = null;
                                        z7 = true;
                                    }
                                    i5 = i2;
                                    i6 = i3;
                                    z7 = z6;
                                    i7 = i4;
                                    f2 = f;
                                    obj = null;
                                    z6 = z5;
                                } else {
                                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                    i6 = i3;
                                    z7 = z6;
                                    f2 = f;
                                    z6 = true;
                                    i7 = 0;
                                    obj = null;
                                }
                                if (obj == null) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (constraintWidget3.mHorizontalResolution != 2) {
                                }
                                i8 = i6;
                                solverVariable7 = solverVariable5;
                                solverVariable8 = solverVariable3;
                                solverVariable9 = solverVariable2;
                                solverVariable10 = solverVariable;
                                i9 = i7;
                                solverVariable11 = solverVariable6;
                                z9 = false;
                                if (constraintWidget3.mVerticalResolution == 2) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (obj == null) {
                                        i10 = i9;
                                        i2 = -1;
                                    } else {
                                        i10 = i9;
                                        if (i10 == 1) {
                                            i2 = -1;
                                        } else {
                                            i2 = -1;
                                            if (i10 == -1) {
                                            }
                                        }
                                        z10 = true;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            constraintAnchor = constraintWidget3.mBottom;
                                            i11 = i;
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                } else {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            } else {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        } else {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                    z10 = z9;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                            }
                        }
                        solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable2 = linearSystem5.createObjectVariable(constraintWidget3.mRight);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mTop.mGroup != i16) {
                        solverVariable3 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup != i16) {
                                solverVariable4 = null;
                                if (i16 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBaseline.mGroup == i16) {
                                    }
                                    solverVariable5 = solverVariable18;
                                    if (constraintWidget3.mParent == null) {
                                        if (constraintWidget3.mLeft.mTarget == null) {
                                        }
                                        z = false;
                                        if (constraintWidget3.mTop.mTarget == null) {
                                        }
                                        z2 = false;
                                        if (constraintWidget3.mLeft.mTarget != null) {
                                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mRight.mTarget != null) {
                                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mTop.mTarget != null) {
                                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                        z3 = z;
                                                                        z4 = z2;
                                                                    }
                                                                }
                                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                                createRow = linearSystem.createRow();
                                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                                linearSystem5.addConstraint(createRow);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    } else {
                                        z3 = false;
                                        z4 = z3;
                                    }
                                    i2 = constraintWidget3.mWidth;
                                    if (i2 < constraintWidget3.mMinWidth) {
                                        i2 = constraintWidget3.mMinWidth;
                                    }
                                    i3 = constraintWidget3.mHeight;
                                    if (i3 < constraintWidget3.mMinHeight) {
                                        i3 = constraintWidget3.mMinHeight;
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    z5 = true;
                                    z6 = true;
                                    i4 = constraintWidget3.mDimensionRatioSide;
                                    f = constraintWidget3.mDimensionRatio;
                                    solverVariable6 = solverVariable4;
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                        i6 = i3;
                                        z7 = z6;
                                        f2 = f;
                                        z6 = true;
                                        i7 = 0;
                                        obj = null;
                                    } else {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                                f = 1.0f / f;
                                            }
                                            i5 = i2;
                                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                            z6 = z5;
                                            f2 = f;
                                            i7 = 1;
                                            obj = null;
                                            z7 = true;
                                        }
                                        i5 = i2;
                                        i6 = i3;
                                        z7 = z6;
                                        i7 = i4;
                                        f2 = f;
                                        obj = null;
                                        z6 = z5;
                                    }
                                    if (obj == null) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (constraintWidget3.mHorizontalResolution != 2) {
                                    }
                                    i8 = i6;
                                    solverVariable7 = solverVariable5;
                                    solverVariable8 = solverVariable3;
                                    solverVariable9 = solverVariable2;
                                    solverVariable10 = solverVariable;
                                    i9 = i7;
                                    solverVariable11 = solverVariable6;
                                    z9 = false;
                                    if (constraintWidget3.mVerticalResolution == 2) {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                        }
                                        if (obj == null) {
                                            i10 = i9;
                                            if (i10 == 1) {
                                                i2 = -1;
                                                if (i10 == -1) {
                                                }
                                            } else {
                                                i2 = -1;
                                            }
                                            z10 = true;
                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                constraintAnchor = constraintWidget3.mBottom;
                                                i11 = i;
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    } else {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                } else {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            } else {
                                                i13 = i10;
                                                i14 = i8;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable8;
                                                i7 = i;
                                                linearSystem3 = linearSystem;
                                                if (i7 == Integer.MAX_VALUE) {
                                                    constraintWidget = this;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                if (obj == null) {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    } else {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        } else {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        }
                                                    }
                                                } else {
                                                    constraintWidget2 = this;
                                                }
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            if (obj == null) {
                                                constraintWidget2 = this;
                                            } else {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    } else {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    }
                                                } else {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                }
                                            }
                                        }
                                        i10 = i9;
                                        i2 = -1;
                                        z10 = z9;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                }
                                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                                solverVariable5 = solverVariable18;
                                if (constraintWidget3.mParent == null) {
                                    z3 = false;
                                    z4 = z3;
                                } else {
                                    if (constraintWidget3.mLeft.mTarget == null) {
                                    }
                                    z = false;
                                    if (constraintWidget3.mTop.mTarget == null) {
                                    }
                                    z2 = false;
                                    if (constraintWidget3.mLeft.mTarget != null) {
                                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mRight.mTarget != null) {
                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                                i2 = constraintWidget3.mWidth;
                                if (i2 < constraintWidget3.mMinWidth) {
                                    i2 = constraintWidget3.mMinWidth;
                                }
                                i3 = constraintWidget3.mHeight;
                                if (i3 < constraintWidget3.mMinHeight) {
                                    i3 = constraintWidget3.mMinHeight;
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                z5 = true;
                                z6 = true;
                                i4 = constraintWidget3.mDimensionRatioSide;
                                f = constraintWidget3.mDimensionRatio;
                                solverVariable6 = solverVariable4;
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        if (constraintWidget3.mDimensionRatioSide == -1) {
                                            f = 1.0f / f;
                                        }
                                        i5 = i2;
                                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                        z6 = z5;
                                        f2 = f;
                                        i7 = 1;
                                        obj = null;
                                        z7 = true;
                                    }
                                    i5 = i2;
                                    i6 = i3;
                                    z7 = z6;
                                    i7 = i4;
                                    f2 = f;
                                    obj = null;
                                    z6 = z5;
                                } else {
                                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                    i6 = i3;
                                    z7 = z6;
                                    f2 = f;
                                    z6 = true;
                                    i7 = 0;
                                    obj = null;
                                }
                                if (obj == null) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (constraintWidget3.mHorizontalResolution != 2) {
                                }
                                i8 = i6;
                                solverVariable7 = solverVariable5;
                                solverVariable8 = solverVariable3;
                                solverVariable9 = solverVariable2;
                                solverVariable10 = solverVariable;
                                i9 = i7;
                                solverVariable11 = solverVariable6;
                                z9 = false;
                                if (constraintWidget3.mVerticalResolution == 2) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (obj == null) {
                                        i10 = i9;
                                        i2 = -1;
                                    } else {
                                        i10 = i9;
                                        if (i10 == 1) {
                                            i2 = -1;
                                        } else {
                                            i2 = -1;
                                            if (i10 == -1) {
                                            }
                                        }
                                        z10 = true;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            constraintAnchor = constraintWidget3.mBottom;
                                            i11 = i;
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                } else {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            } else {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        } else {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                    z10 = z9;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                            }
                        }
                        solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable3 = linearSystem5.createObjectVariable(constraintWidget3.mTop);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBottom.mGroup != i16) {
                        solverVariable4 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBaseline.mGroup == i16) {
                    }
                    solverVariable5 = solverVariable18;
                    if (constraintWidget3.mParent == null) {
                        if (constraintWidget3.mLeft.mTarget == null) {
                        }
                        z = false;
                        if (constraintWidget3.mTop.mTarget == null) {
                        }
                        z2 = false;
                        if (constraintWidget3.mLeft.mTarget != null) {
                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mRight.mTarget != null) {
                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    } else {
                        z3 = false;
                        z4 = z3;
                    }
                    i2 = constraintWidget3.mWidth;
                    if (i2 < constraintWidget3.mMinWidth) {
                        i2 = constraintWidget3.mMinWidth;
                    }
                    i3 = constraintWidget3.mHeight;
                    if (i3 < constraintWidget3.mMinHeight) {
                        i3 = constraintWidget3.mMinHeight;
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    z5 = true;
                    z6 = true;
                    i4 = constraintWidget3.mDimensionRatioSide;
                    f = constraintWidget3.mDimensionRatio;
                    solverVariable6 = solverVariable4;
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                        i6 = i3;
                        z7 = z6;
                        f2 = f;
                        z6 = true;
                        i7 = 0;
                        obj = null;
                    } else {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                f = 1.0f / f;
                            }
                            i5 = i2;
                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                            z6 = z5;
                            f2 = f;
                            i7 = 1;
                            obj = null;
                            z7 = true;
                        }
                        i5 = i2;
                        i6 = i3;
                        z7 = z6;
                        i7 = i4;
                        f2 = f;
                        obj = null;
                        z6 = z5;
                    }
                    if (obj == null) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (constraintWidget3.mHorizontalResolution != 2) {
                    }
                    i8 = i6;
                    solverVariable7 = solverVariable5;
                    solverVariable8 = solverVariable3;
                    solverVariable9 = solverVariable2;
                    solverVariable10 = solverVariable;
                    i9 = i7;
                    solverVariable11 = solverVariable6;
                    z9 = false;
                    if (constraintWidget3.mVerticalResolution == 2) {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (obj == null) {
                            i10 = i9;
                            if (i10 == 1) {
                                i2 = -1;
                                if (i10 == -1) {
                                }
                            } else {
                                i2 = -1;
                            }
                            z10 = true;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            } else {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                        i10 = i9;
                        i2 = -1;
                        z10 = z9;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        constraintAnchor = constraintWidget3.mBottom;
                        i11 = i;
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup == i11) {
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            } else {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        } else {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                }
                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                solverVariable5 = solverVariable18;
                if (constraintWidget3.mParent == null) {
                    z3 = false;
                    z4 = z3;
                } else {
                    if (constraintWidget3.mLeft.mTarget == null) {
                    }
                    z = false;
                    if (constraintWidget3.mTop.mTarget == null) {
                    }
                    z2 = false;
                    if (constraintWidget3.mLeft.mTarget != null) {
                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mRight.mTarget != null) {
                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
                i2 = constraintWidget3.mWidth;
                if (i2 < constraintWidget3.mMinWidth) {
                    i2 = constraintWidget3.mMinWidth;
                }
                i3 = constraintWidget3.mHeight;
                if (i3 < constraintWidget3.mMinHeight) {
                    i3 = constraintWidget3.mMinHeight;
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                z5 = true;
                z6 = true;
                i4 = constraintWidget3.mDimensionRatioSide;
                f = constraintWidget3.mDimensionRatio;
                solverVariable6 = solverVariable4;
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        if (constraintWidget3.mDimensionRatioSide == -1) {
                            f = 1.0f / f;
                        }
                        i5 = i2;
                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                        z6 = z5;
                        f2 = f;
                        i7 = 1;
                        obj = null;
                        z7 = true;
                    }
                    i5 = i2;
                    i6 = i3;
                    z7 = z6;
                    i7 = i4;
                    f2 = f;
                    obj = null;
                    z6 = z5;
                } else {
                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                    i6 = i3;
                    z7 = z6;
                    f2 = f;
                    z6 = true;
                    i7 = 0;
                    obj = null;
                }
                if (obj == null) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                }
                if (constraintWidget3.mHorizontalResolution != 2) {
                }
                i8 = i6;
                solverVariable7 = solverVariable5;
                solverVariable8 = solverVariable3;
                solverVariable9 = solverVariable2;
                solverVariable10 = solverVariable;
                i9 = i7;
                solverVariable11 = solverVariable6;
                z9 = false;
                if (constraintWidget3.mVerticalResolution == 2) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (obj == null) {
                        i10 = i9;
                        i2 = -1;
                    } else {
                        i10 = i9;
                        if (i10 == 1) {
                            i2 = -1;
                        } else {
                            i2 = -1;
                            if (i10 == -1) {
                            }
                        }
                        z10 = true;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        } else {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                    z10 = z9;
                    if (constraintWidget3.mBaselineDistance <= 0) {
                        i13 = i10;
                        i14 = i8;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable8;
                        i7 = i;
                        linearSystem3 = linearSystem;
                        if (i7 == Integer.MAX_VALUE) {
                            constraintWidget = this;
                        }
                        if (z10) {
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                        if (obj == null) {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            } else {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                } else {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                }
                            }
                        } else {
                            constraintWidget2 = this;
                        }
                    }
                    constraintAnchor = constraintWidget3.mBottom;
                    i11 = i;
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mBottom.mGroup == i11) {
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        } else {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    } else {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    if (obj == null) {
                        constraintWidget2 = this;
                    } else {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            } else {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            }
                        } else {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        }
                    }
                }
            }
        }
        solverVariable = linearSystem5.createObjectVariable(constraintWidget3.mLeft);
        if (i16 != Integer.MAX_VALUE) {
            if (constraintWidget3.mRight.mGroup == i16) {
                solverVariable2 = null;
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mTop.mGroup != i16) {
                        solverVariable3 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup != i16) {
                                solverVariable4 = null;
                                if (i16 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBaseline.mGroup == i16) {
                                    }
                                    solverVariable5 = solverVariable18;
                                    if (constraintWidget3.mParent == null) {
                                        if (constraintWidget3.mLeft.mTarget == null) {
                                        }
                                        z = false;
                                        if (constraintWidget3.mTop.mTarget == null) {
                                        }
                                        z2 = false;
                                        if (constraintWidget3.mLeft.mTarget != null) {
                                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mRight.mTarget != null) {
                                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mTop.mTarget != null) {
                                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                        z3 = z;
                                                                        z4 = z2;
                                                                    }
                                                                }
                                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                                createRow = linearSystem.createRow();
                                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                                linearSystem5.addConstraint(createRow);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    } else {
                                        z3 = false;
                                        z4 = z3;
                                    }
                                    i2 = constraintWidget3.mWidth;
                                    if (i2 < constraintWidget3.mMinWidth) {
                                        i2 = constraintWidget3.mMinWidth;
                                    }
                                    i3 = constraintWidget3.mHeight;
                                    if (i3 < constraintWidget3.mMinHeight) {
                                        i3 = constraintWidget3.mMinHeight;
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    z5 = true;
                                    z6 = true;
                                    i4 = constraintWidget3.mDimensionRatioSide;
                                    f = constraintWidget3.mDimensionRatio;
                                    solverVariable6 = solverVariable4;
                                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                        i6 = i3;
                                        z7 = z6;
                                        f2 = f;
                                        z6 = true;
                                        i7 = 0;
                                        obj = null;
                                    } else {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                                f = 1.0f / f;
                                            }
                                            i5 = i2;
                                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                            z6 = z5;
                                            f2 = f;
                                            i7 = 1;
                                            obj = null;
                                            z7 = true;
                                        }
                                        i5 = i2;
                                        i6 = i3;
                                        z7 = z6;
                                        i7 = i4;
                                        f2 = f;
                                        obj = null;
                                        z6 = z5;
                                    }
                                    if (obj == null) {
                                    }
                                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (constraintWidget3.mHorizontalResolution != 2) {
                                    }
                                    i8 = i6;
                                    solverVariable7 = solverVariable5;
                                    solverVariable8 = solverVariable3;
                                    solverVariable9 = solverVariable2;
                                    solverVariable10 = solverVariable;
                                    i9 = i7;
                                    solverVariable11 = solverVariable6;
                                    z9 = false;
                                    if (constraintWidget3.mVerticalResolution == 2) {
                                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                        }
                                        if (obj == null) {
                                            i10 = i9;
                                            if (i10 == 1) {
                                                i2 = -1;
                                                if (i10 == -1) {
                                                }
                                            } else {
                                                i2 = -1;
                                            }
                                            z10 = true;
                                            if (constraintWidget3.mBaselineDistance <= 0) {
                                                constraintAnchor = constraintWidget3.mBottom;
                                                i11 = i;
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                                    }
                                                    solverVariable5 = solverVariable8;
                                                    linearSystem2 = linearSystem;
                                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                                        i12 = constraintWidget3.mBaselineDistance;
                                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                                    } else {
                                                        constraintAnchor2 = constraintAnchor;
                                                        i12 = i8;
                                                    }
                                                    if (i11 != Integer.MAX_VALUE) {
                                                        if (constraintWidget3.mTop.mGroup == i11) {
                                                        }
                                                        linearSystem3 = linearSystem2;
                                                        i13 = i10;
                                                        solverVariable12 = solverVariable11;
                                                        solverVariable13 = solverVariable5;
                                                    }
                                                    if (z10) {
                                                    }
                                                    solverVariable14 = solverVariable5;
                                                    i13 = i10;
                                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable14;
                                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                } else {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            } else {
                                                i13 = i10;
                                                i14 = i8;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable8;
                                                i7 = i;
                                                linearSystem3 = linearSystem;
                                                if (i7 == Integer.MAX_VALUE) {
                                                    constraintWidget = this;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable15 = solverVariable12;
                                                solverVariable16 = solverVariable13;
                                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                                if (obj == null) {
                                                    createRow2 = linearSystem.createRow();
                                                    i3 = i;
                                                    if (i3 == Integer.MAX_VALUE) {
                                                        constraintWidget2 = this;
                                                    }
                                                    i4 = i13;
                                                    if (i4 != 0) {
                                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                    } else {
                                                        linearSystem4 = linearSystem;
                                                        if (i4 != 1) {
                                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                        } else {
                                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                            } else {
                                                                createObjectVariable2 = solverVariable9;
                                                                solverVariable17 = solverVariable10;
                                                                i15 = 3;
                                                            }
                                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                            } else {
                                                                solverVariable5 = solverVariable15;
                                                                createObjectVariable3 = solverVariable16;
                                                            }
                                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                            createObjectVariable = linearSystem.createErrorVariable();
                                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                                            createObjectVariable.strength = 4;
                                                            createObjectVariable2.strength = 4;
                                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                                            linearSystem4.addConstraint(createRow2);
                                                        }
                                                    }
                                                } else {
                                                    constraintWidget2 = this;
                                                }
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            if (obj == null) {
                                                constraintWidget2 = this;
                                            } else {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    } else {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    }
                                                } else {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                }
                                            }
                                        }
                                        i10 = i9;
                                        i2 = -1;
                                        z10 = z9;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                }
                                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                                solverVariable5 = solverVariable18;
                                if (constraintWidget3.mParent == null) {
                                    z3 = false;
                                    z4 = z3;
                                } else {
                                    if (constraintWidget3.mLeft.mTarget == null) {
                                    }
                                    z = false;
                                    if (constraintWidget3.mTop.mTarget == null) {
                                    }
                                    z2 = false;
                                    if (constraintWidget3.mLeft.mTarget != null) {
                                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mRight.mTarget != null) {
                                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mTop.mTarget != null) {
                                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                    z3 = z;
                                                                    z4 = z2;
                                                                }
                                                            }
                                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                            createRow = linearSystem.createRow();
                                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                            linearSystem5.addConstraint(createRow);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                                i2 = constraintWidget3.mWidth;
                                if (i2 < constraintWidget3.mMinWidth) {
                                    i2 = constraintWidget3.mMinWidth;
                                }
                                i3 = constraintWidget3.mHeight;
                                if (i3 < constraintWidget3.mMinHeight) {
                                    i3 = constraintWidget3.mMinHeight;
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                z5 = true;
                                z6 = true;
                                i4 = constraintWidget3.mDimensionRatioSide;
                                f = constraintWidget3.mDimensionRatio;
                                solverVariable6 = solverVariable4;
                                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        if (constraintWidget3.mDimensionRatioSide == -1) {
                                            f = 1.0f / f;
                                        }
                                        i5 = i2;
                                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                        z6 = z5;
                                        f2 = f;
                                        i7 = 1;
                                        obj = null;
                                        z7 = true;
                                    }
                                    i5 = i2;
                                    i6 = i3;
                                    z7 = z6;
                                    i7 = i4;
                                    f2 = f;
                                    obj = null;
                                    z6 = z5;
                                } else {
                                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                    i6 = i3;
                                    z7 = z6;
                                    f2 = f;
                                    z6 = true;
                                    i7 = 0;
                                    obj = null;
                                }
                                if (obj == null) {
                                }
                                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (constraintWidget3.mHorizontalResolution != 2) {
                                }
                                i8 = i6;
                                solverVariable7 = solverVariable5;
                                solverVariable8 = solverVariable3;
                                solverVariable9 = solverVariable2;
                                solverVariable10 = solverVariable;
                                i9 = i7;
                                solverVariable11 = solverVariable6;
                                z9 = false;
                                if (constraintWidget3.mVerticalResolution == 2) {
                                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                    }
                                    if (obj == null) {
                                        i10 = i9;
                                        i2 = -1;
                                    } else {
                                        i10 = i9;
                                        if (i10 == 1) {
                                            i2 = -1;
                                        } else {
                                            i2 = -1;
                                            if (i10 == -1) {
                                            }
                                        }
                                        z10 = true;
                                        if (constraintWidget3.mBaselineDistance <= 0) {
                                            constraintAnchor = constraintWidget3.mBottom;
                                            i11 = i;
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mBottom.mGroup == i11) {
                                                }
                                                solverVariable5 = solverVariable8;
                                                linearSystem2 = linearSystem;
                                                if (constraintWidget3.mBaseline.mTarget == null) {
                                                    i12 = constraintWidget3.mBaselineDistance;
                                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                                } else {
                                                    constraintAnchor2 = constraintAnchor;
                                                    i12 = i8;
                                                }
                                                if (i11 != Integer.MAX_VALUE) {
                                                    if (constraintWidget3.mTop.mGroup == i11) {
                                                    }
                                                    linearSystem3 = linearSystem2;
                                                    i13 = i10;
                                                    solverVariable12 = solverVariable11;
                                                    solverVariable13 = solverVariable5;
                                                }
                                                if (z10) {
                                                }
                                                solverVariable14 = solverVariable5;
                                                i13 = i10;
                                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable14;
                                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            } else {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        } else {
                                            i13 = i10;
                                            i14 = i8;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable8;
                                            i7 = i;
                                            linearSystem3 = linearSystem;
                                            if (i7 == Integer.MAX_VALUE) {
                                                constraintWidget = this;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable15 = solverVariable12;
                                            solverVariable16 = solverVariable13;
                                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                            if (obj == null) {
                                                createRow2 = linearSystem.createRow();
                                                i3 = i;
                                                if (i3 == Integer.MAX_VALUE) {
                                                    constraintWidget2 = this;
                                                }
                                                i4 = i13;
                                                if (i4 != 0) {
                                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                                } else {
                                                    linearSystem4 = linearSystem;
                                                    if (i4 != 1) {
                                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                    } else {
                                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                        } else {
                                                            createObjectVariable2 = solverVariable9;
                                                            solverVariable17 = solverVariable10;
                                                            i15 = 3;
                                                        }
                                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                        } else {
                                                            solverVariable5 = solverVariable15;
                                                            createObjectVariable3 = solverVariable16;
                                                        }
                                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                        createObjectVariable = linearSystem.createErrorVariable();
                                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                                        createObjectVariable.strength = 4;
                                                        createObjectVariable2.strength = 4;
                                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                                        linearSystem4.addConstraint(createRow2);
                                                    }
                                                }
                                            } else {
                                                constraintWidget2 = this;
                                            }
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        if (obj == null) {
                                            constraintWidget2 = this;
                                        } else {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                } else {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                }
                                            } else {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            }
                                        }
                                    }
                                    z10 = z9;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                            }
                        }
                        solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable3 = linearSystem5.createObjectVariable(constraintWidget3.mTop);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBottom.mGroup != i16) {
                        solverVariable4 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBaseline.mGroup == i16) {
                    }
                    solverVariable5 = solverVariable18;
                    if (constraintWidget3.mParent == null) {
                        if (constraintWidget3.mLeft.mTarget == null) {
                        }
                        z = false;
                        if (constraintWidget3.mTop.mTarget == null) {
                        }
                        z2 = false;
                        if (constraintWidget3.mLeft.mTarget != null) {
                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mRight.mTarget != null) {
                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    } else {
                        z3 = false;
                        z4 = z3;
                    }
                    i2 = constraintWidget3.mWidth;
                    if (i2 < constraintWidget3.mMinWidth) {
                        i2 = constraintWidget3.mMinWidth;
                    }
                    i3 = constraintWidget3.mHeight;
                    if (i3 < constraintWidget3.mMinHeight) {
                        i3 = constraintWidget3.mMinHeight;
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    z5 = true;
                    z6 = true;
                    i4 = constraintWidget3.mDimensionRatioSide;
                    f = constraintWidget3.mDimensionRatio;
                    solverVariable6 = solverVariable4;
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                        i6 = i3;
                        z7 = z6;
                        f2 = f;
                        z6 = true;
                        i7 = 0;
                        obj = null;
                    } else {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                f = 1.0f / f;
                            }
                            i5 = i2;
                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                            z6 = z5;
                            f2 = f;
                            i7 = 1;
                            obj = null;
                            z7 = true;
                        }
                        i5 = i2;
                        i6 = i3;
                        z7 = z6;
                        i7 = i4;
                        f2 = f;
                        obj = null;
                        z6 = z5;
                    }
                    if (obj == null) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (constraintWidget3.mHorizontalResolution != 2) {
                    }
                    i8 = i6;
                    solverVariable7 = solverVariable5;
                    solverVariable8 = solverVariable3;
                    solverVariable9 = solverVariable2;
                    solverVariable10 = solverVariable;
                    i9 = i7;
                    solverVariable11 = solverVariable6;
                    z9 = false;
                    if (constraintWidget3.mVerticalResolution == 2) {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (obj == null) {
                            i10 = i9;
                            if (i10 == 1) {
                                i2 = -1;
                                if (i10 == -1) {
                                }
                            } else {
                                i2 = -1;
                            }
                            z10 = true;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            } else {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                        i10 = i9;
                        i2 = -1;
                        z10 = z9;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        constraintAnchor = constraintWidget3.mBottom;
                        i11 = i;
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup == i11) {
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            } else {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        } else {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                }
                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                solverVariable5 = solverVariable18;
                if (constraintWidget3.mParent == null) {
                    z3 = false;
                    z4 = z3;
                } else {
                    if (constraintWidget3.mLeft.mTarget == null) {
                    }
                    z = false;
                    if (constraintWidget3.mTop.mTarget == null) {
                    }
                    z2 = false;
                    if (constraintWidget3.mLeft.mTarget != null) {
                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mRight.mTarget != null) {
                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
                i2 = constraintWidget3.mWidth;
                if (i2 < constraintWidget3.mMinWidth) {
                    i2 = constraintWidget3.mMinWidth;
                }
                i3 = constraintWidget3.mHeight;
                if (i3 < constraintWidget3.mMinHeight) {
                    i3 = constraintWidget3.mMinHeight;
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                z5 = true;
                z6 = true;
                i4 = constraintWidget3.mDimensionRatioSide;
                f = constraintWidget3.mDimensionRatio;
                solverVariable6 = solverVariable4;
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        if (constraintWidget3.mDimensionRatioSide == -1) {
                            f = 1.0f / f;
                        }
                        i5 = i2;
                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                        z6 = z5;
                        f2 = f;
                        i7 = 1;
                        obj = null;
                        z7 = true;
                    }
                    i5 = i2;
                    i6 = i3;
                    z7 = z6;
                    i7 = i4;
                    f2 = f;
                    obj = null;
                    z6 = z5;
                } else {
                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                    i6 = i3;
                    z7 = z6;
                    f2 = f;
                    z6 = true;
                    i7 = 0;
                    obj = null;
                }
                if (obj == null) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                }
                if (constraintWidget3.mHorizontalResolution != 2) {
                }
                i8 = i6;
                solverVariable7 = solverVariable5;
                solverVariable8 = solverVariable3;
                solverVariable9 = solverVariable2;
                solverVariable10 = solverVariable;
                i9 = i7;
                solverVariable11 = solverVariable6;
                z9 = false;
                if (constraintWidget3.mVerticalResolution == 2) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (obj == null) {
                        i10 = i9;
                        i2 = -1;
                    } else {
                        i10 = i9;
                        if (i10 == 1) {
                            i2 = -1;
                        } else {
                            i2 = -1;
                            if (i10 == -1) {
                            }
                        }
                        z10 = true;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        } else {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                    z10 = z9;
                    if (constraintWidget3.mBaselineDistance <= 0) {
                        i13 = i10;
                        i14 = i8;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable8;
                        i7 = i;
                        linearSystem3 = linearSystem;
                        if (i7 == Integer.MAX_VALUE) {
                            constraintWidget = this;
                        }
                        if (z10) {
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                        if (obj == null) {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            } else {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                } else {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                }
                            }
                        } else {
                            constraintWidget2 = this;
                        }
                    }
                    constraintAnchor = constraintWidget3.mBottom;
                    i11 = i;
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mBottom.mGroup == i11) {
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        } else {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    } else {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    if (obj == null) {
                        constraintWidget2 = this;
                    } else {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            } else {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            }
                        } else {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        }
                    }
                }
            }
        }
        solverVariable2 = linearSystem5.createObjectVariable(constraintWidget3.mRight);
        if (i16 != Integer.MAX_VALUE) {
            if (constraintWidget3.mTop.mGroup != i16) {
                solverVariable3 = null;
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBottom.mGroup != i16) {
                        solverVariable4 = null;
                        if (i16 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBaseline.mGroup == i16) {
                            }
                            solverVariable5 = solverVariable18;
                            if (constraintWidget3.mParent == null) {
                                if (constraintWidget3.mLeft.mTarget == null) {
                                }
                                z = false;
                                if (constraintWidget3.mTop.mTarget == null) {
                                }
                                z2 = false;
                                if (constraintWidget3.mLeft.mTarget != null) {
                                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mRight.mTarget != null) {
                                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mTop.mTarget != null) {
                                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                        if (constraintWidget3.mBottom.mTarget != null) {
                                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                                z3 = z;
                                                                z4 = z2;
                                                            }
                                                        }
                                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                        createRow = linearSystem.createRow();
                                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                        linearSystem5.addConstraint(createRow);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            } else {
                                z3 = false;
                                z4 = z3;
                            }
                            i2 = constraintWidget3.mWidth;
                            if (i2 < constraintWidget3.mMinWidth) {
                                i2 = constraintWidget3.mMinWidth;
                            }
                            i3 = constraintWidget3.mHeight;
                            if (i3 < constraintWidget3.mMinHeight) {
                                i3 = constraintWidget3.mMinHeight;
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            z5 = true;
                            z6 = true;
                            i4 = constraintWidget3.mDimensionRatioSide;
                            f = constraintWidget3.mDimensionRatio;
                            solverVariable6 = solverVariable4;
                            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                                i6 = i3;
                                z7 = z6;
                                f2 = f;
                                z6 = true;
                                i7 = 0;
                                obj = null;
                            } else {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                    if (constraintWidget3.mDimensionRatioSide == -1) {
                                        f = 1.0f / f;
                                    }
                                    i5 = i2;
                                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                    z6 = z5;
                                    f2 = f;
                                    i7 = 1;
                                    obj = null;
                                    z7 = true;
                                }
                                i5 = i2;
                                i6 = i3;
                                z7 = z6;
                                i7 = i4;
                                f2 = f;
                                obj = null;
                                z6 = z5;
                            }
                            if (obj == null) {
                            }
                            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (constraintWidget3.mHorizontalResolution != 2) {
                            }
                            i8 = i6;
                            solverVariable7 = solverVariable5;
                            solverVariable8 = solverVariable3;
                            solverVariable9 = solverVariable2;
                            solverVariable10 = solverVariable;
                            i9 = i7;
                            solverVariable11 = solverVariable6;
                            z9 = false;
                            if (constraintWidget3.mVerticalResolution == 2) {
                                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                                }
                                if (obj == null) {
                                    i10 = i9;
                                    if (i10 == 1) {
                                        i2 = -1;
                                        if (i10 == -1) {
                                        }
                                    } else {
                                        i2 = -1;
                                    }
                                    z10 = true;
                                    if (constraintWidget3.mBaselineDistance <= 0) {
                                        constraintAnchor = constraintWidget3.mBottom;
                                        i11 = i;
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mBottom.mGroup == i11) {
                                            }
                                            solverVariable5 = solverVariable8;
                                            linearSystem2 = linearSystem;
                                            if (constraintWidget3.mBaseline.mTarget == null) {
                                                i12 = constraintWidget3.mBaselineDistance;
                                                constraintAnchor2 = constraintWidget3.mBaseline;
                                            } else {
                                                constraintAnchor2 = constraintAnchor;
                                                i12 = i8;
                                            }
                                            if (i11 != Integer.MAX_VALUE) {
                                                if (constraintWidget3.mTop.mGroup == i11) {
                                                }
                                                linearSystem3 = linearSystem2;
                                                i13 = i10;
                                                solverVariable12 = solverVariable11;
                                                solverVariable13 = solverVariable5;
                                            }
                                            if (z10) {
                                            }
                                            solverVariable14 = solverVariable5;
                                            i13 = i10;
                                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable14;
                                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        } else {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    } else {
                                        i13 = i10;
                                        i14 = i8;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable8;
                                        i7 = i;
                                        linearSystem3 = linearSystem;
                                        if (i7 == Integer.MAX_VALUE) {
                                            constraintWidget = this;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable15 = solverVariable12;
                                        solverVariable16 = solverVariable13;
                                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                        if (obj == null) {
                                            createRow2 = linearSystem.createRow();
                                            i3 = i;
                                            if (i3 == Integer.MAX_VALUE) {
                                                constraintWidget2 = this;
                                            }
                                            i4 = i13;
                                            if (i4 != 0) {
                                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                            } else {
                                                linearSystem4 = linearSystem;
                                                if (i4 != 1) {
                                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                                } else {
                                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                    } else {
                                                        createObjectVariable2 = solverVariable9;
                                                        solverVariable17 = solverVariable10;
                                                        i15 = 3;
                                                    }
                                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                    } else {
                                                        solverVariable5 = solverVariable15;
                                                        createObjectVariable3 = solverVariable16;
                                                    }
                                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                    createObjectVariable = linearSystem.createErrorVariable();
                                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                                    createObjectVariable.strength = 4;
                                                    createObjectVariable2.strength = 4;
                                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                                    linearSystem4.addConstraint(createRow2);
                                                }
                                            }
                                        } else {
                                            constraintWidget2 = this;
                                        }
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    if (obj == null) {
                                        constraintWidget2 = this;
                                    } else {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            } else {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            }
                                        } else {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        }
                                    }
                                }
                                i10 = i9;
                                i2 = -1;
                                z10 = z9;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                        }
                        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                        solverVariable5 = solverVariable18;
                        if (constraintWidget3.mParent == null) {
                            z3 = false;
                            z4 = z3;
                        } else {
                            if (constraintWidget3.mLeft.mTarget == null) {
                            }
                            z = false;
                            if (constraintWidget3.mTop.mTarget == null) {
                            }
                            z2 = false;
                            if (constraintWidget3.mLeft.mTarget != null) {
                                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mRight.mTarget != null) {
                                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mTop.mTarget != null) {
                                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                    if (constraintWidget3.mBottom.mTarget != null) {
                                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                            z3 = z;
                                                            z4 = z2;
                                                        }
                                                    }
                                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                    createRow = linearSystem.createRow();
                                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                    linearSystem5.addConstraint(createRow);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                        i2 = constraintWidget3.mWidth;
                        if (i2 < constraintWidget3.mMinWidth) {
                            i2 = constraintWidget3.mMinWidth;
                        }
                        i3 = constraintWidget3.mHeight;
                        if (i3 < constraintWidget3.mMinHeight) {
                            i3 = constraintWidget3.mMinHeight;
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        z5 = true;
                        z6 = true;
                        i4 = constraintWidget3.mDimensionRatioSide;
                        f = constraintWidget3.mDimensionRatio;
                        solverVariable6 = solverVariable4;
                        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                                if (constraintWidget3.mDimensionRatioSide == -1) {
                                    f = 1.0f / f;
                                }
                                i5 = i2;
                                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                                z6 = z5;
                                f2 = f;
                                i7 = 1;
                                obj = null;
                                z7 = true;
                            }
                            i5 = i2;
                            i6 = i3;
                            z7 = z6;
                            i7 = i4;
                            f2 = f;
                            obj = null;
                            z6 = z5;
                        } else {
                            i5 = (int) (((float) constraintWidget3.mHeight) * f);
                            i6 = i3;
                            z7 = z6;
                            f2 = f;
                            z6 = true;
                            i7 = 0;
                            obj = null;
                        }
                        if (obj == null) {
                        }
                        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (constraintWidget3.mHorizontalResolution != 2) {
                        }
                        i8 = i6;
                        solverVariable7 = solverVariable5;
                        solverVariable8 = solverVariable3;
                        solverVariable9 = solverVariable2;
                        solverVariable10 = solverVariable;
                        i9 = i7;
                        solverVariable11 = solverVariable6;
                        z9 = false;
                        if (constraintWidget3.mVerticalResolution == 2) {
                            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                            }
                            if (obj == null) {
                                i10 = i9;
                                i2 = -1;
                            } else {
                                i10 = i9;
                                if (i10 == 1) {
                                    i2 = -1;
                                } else {
                                    i2 = -1;
                                    if (i10 == -1) {
                                    }
                                }
                                z10 = true;
                                if (constraintWidget3.mBaselineDistance <= 0) {
                                    constraintAnchor = constraintWidget3.mBottom;
                                    i11 = i;
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mBottom.mGroup == i11) {
                                        }
                                        solverVariable5 = solverVariable8;
                                        linearSystem2 = linearSystem;
                                        if (constraintWidget3.mBaseline.mTarget == null) {
                                            i12 = constraintWidget3.mBaselineDistance;
                                            constraintAnchor2 = constraintWidget3.mBaseline;
                                        } else {
                                            constraintAnchor2 = constraintAnchor;
                                            i12 = i8;
                                        }
                                        if (i11 != Integer.MAX_VALUE) {
                                            if (constraintWidget3.mTop.mGroup == i11) {
                                            }
                                            linearSystem3 = linearSystem2;
                                            i13 = i10;
                                            solverVariable12 = solverVariable11;
                                            solverVariable13 = solverVariable5;
                                        }
                                        if (z10) {
                                        }
                                        solverVariable14 = solverVariable5;
                                        i13 = i10;
                                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable14;
                                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    } else {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                } else {
                                    i13 = i10;
                                    i14 = i8;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable8;
                                    i7 = i;
                                    linearSystem3 = linearSystem;
                                    if (i7 == Integer.MAX_VALUE) {
                                        constraintWidget = this;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable15 = solverVariable12;
                                    solverVariable16 = solverVariable13;
                                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                    if (obj == null) {
                                        createRow2 = linearSystem.createRow();
                                        i3 = i;
                                        if (i3 == Integer.MAX_VALUE) {
                                            constraintWidget2 = this;
                                        }
                                        i4 = i13;
                                        if (i4 != 0) {
                                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                        } else {
                                            linearSystem4 = linearSystem;
                                            if (i4 != 1) {
                                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                            } else {
                                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                                } else {
                                                    createObjectVariable2 = solverVariable9;
                                                    solverVariable17 = solverVariable10;
                                                    i15 = 3;
                                                }
                                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                                } else {
                                                    solverVariable5 = solverVariable15;
                                                    createObjectVariable3 = solverVariable16;
                                                }
                                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                                createObjectVariable = linearSystem.createErrorVariable();
                                                createObjectVariable2 = linearSystem.createErrorVariable();
                                                createObjectVariable.strength = 4;
                                                createObjectVariable2.strength = 4;
                                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                                linearSystem4.addConstraint(createRow2);
                                            }
                                        }
                                    } else {
                                        constraintWidget2 = this;
                                    }
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                if (obj == null) {
                                    constraintWidget2 = this;
                                } else {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        } else {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        }
                                    } else {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    }
                                }
                            }
                            z10 = z9;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                    }
                }
                solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBaseline.mGroup == i16) {
                    }
                    solverVariable5 = solverVariable18;
                    if (constraintWidget3.mParent == null) {
                        if (constraintWidget3.mLeft.mTarget == null) {
                        }
                        z = false;
                        if (constraintWidget3.mTop.mTarget == null) {
                        }
                        z2 = false;
                        if (constraintWidget3.mLeft.mTarget != null) {
                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mRight.mTarget != null) {
                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    } else {
                        z3 = false;
                        z4 = z3;
                    }
                    i2 = constraintWidget3.mWidth;
                    if (i2 < constraintWidget3.mMinWidth) {
                        i2 = constraintWidget3.mMinWidth;
                    }
                    i3 = constraintWidget3.mHeight;
                    if (i3 < constraintWidget3.mMinHeight) {
                        i3 = constraintWidget3.mMinHeight;
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    z5 = true;
                    z6 = true;
                    i4 = constraintWidget3.mDimensionRatioSide;
                    f = constraintWidget3.mDimensionRatio;
                    solverVariable6 = solverVariable4;
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                        i6 = i3;
                        z7 = z6;
                        f2 = f;
                        z6 = true;
                        i7 = 0;
                        obj = null;
                    } else {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                f = 1.0f / f;
                            }
                            i5 = i2;
                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                            z6 = z5;
                            f2 = f;
                            i7 = 1;
                            obj = null;
                            z7 = true;
                        }
                        i5 = i2;
                        i6 = i3;
                        z7 = z6;
                        i7 = i4;
                        f2 = f;
                        obj = null;
                        z6 = z5;
                    }
                    if (obj == null) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (constraintWidget3.mHorizontalResolution != 2) {
                    }
                    i8 = i6;
                    solverVariable7 = solverVariable5;
                    solverVariable8 = solverVariable3;
                    solverVariable9 = solverVariable2;
                    solverVariable10 = solverVariable;
                    i9 = i7;
                    solverVariable11 = solverVariable6;
                    z9 = false;
                    if (constraintWidget3.mVerticalResolution == 2) {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (obj == null) {
                            i10 = i9;
                            if (i10 == 1) {
                                i2 = -1;
                                if (i10 == -1) {
                                }
                            } else {
                                i2 = -1;
                            }
                            z10 = true;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            } else {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                        i10 = i9;
                        i2 = -1;
                        z10 = z9;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        constraintAnchor = constraintWidget3.mBottom;
                        i11 = i;
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup == i11) {
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            } else {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        } else {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                }
                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                solverVariable5 = solverVariable18;
                if (constraintWidget3.mParent == null) {
                    z3 = false;
                    z4 = z3;
                } else {
                    if (constraintWidget3.mLeft.mTarget == null) {
                    }
                    z = false;
                    if (constraintWidget3.mTop.mTarget == null) {
                    }
                    z2 = false;
                    if (constraintWidget3.mLeft.mTarget != null) {
                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mRight.mTarget != null) {
                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
                i2 = constraintWidget3.mWidth;
                if (i2 < constraintWidget3.mMinWidth) {
                    i2 = constraintWidget3.mMinWidth;
                }
                i3 = constraintWidget3.mHeight;
                if (i3 < constraintWidget3.mMinHeight) {
                    i3 = constraintWidget3.mMinHeight;
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                z5 = true;
                z6 = true;
                i4 = constraintWidget3.mDimensionRatioSide;
                f = constraintWidget3.mDimensionRatio;
                solverVariable6 = solverVariable4;
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        if (constraintWidget3.mDimensionRatioSide == -1) {
                            f = 1.0f / f;
                        }
                        i5 = i2;
                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                        z6 = z5;
                        f2 = f;
                        i7 = 1;
                        obj = null;
                        z7 = true;
                    }
                    i5 = i2;
                    i6 = i3;
                    z7 = z6;
                    i7 = i4;
                    f2 = f;
                    obj = null;
                    z6 = z5;
                } else {
                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                    i6 = i3;
                    z7 = z6;
                    f2 = f;
                    z6 = true;
                    i7 = 0;
                    obj = null;
                }
                if (obj == null) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                }
                if (constraintWidget3.mHorizontalResolution != 2) {
                }
                i8 = i6;
                solverVariable7 = solverVariable5;
                solverVariable8 = solverVariable3;
                solverVariable9 = solverVariable2;
                solverVariable10 = solverVariable;
                i9 = i7;
                solverVariable11 = solverVariable6;
                z9 = false;
                if (constraintWidget3.mVerticalResolution == 2) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (obj == null) {
                        i10 = i9;
                        i2 = -1;
                    } else {
                        i10 = i9;
                        if (i10 == 1) {
                            i2 = -1;
                        } else {
                            i2 = -1;
                            if (i10 == -1) {
                            }
                        }
                        z10 = true;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        } else {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                    z10 = z9;
                    if (constraintWidget3.mBaselineDistance <= 0) {
                        i13 = i10;
                        i14 = i8;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable8;
                        i7 = i;
                        linearSystem3 = linearSystem;
                        if (i7 == Integer.MAX_VALUE) {
                            constraintWidget = this;
                        }
                        if (z10) {
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                        if (obj == null) {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            } else {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                } else {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                }
                            }
                        } else {
                            constraintWidget2 = this;
                        }
                    }
                    constraintAnchor = constraintWidget3.mBottom;
                    i11 = i;
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mBottom.mGroup == i11) {
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        } else {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    } else {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    if (obj == null) {
                        constraintWidget2 = this;
                    } else {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            } else {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            }
                        } else {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        }
                    }
                }
            }
        }
        solverVariable3 = linearSystem5.createObjectVariable(constraintWidget3.mTop);
        if (i16 != Integer.MAX_VALUE) {
            if (constraintWidget3.mBottom.mGroup != i16) {
                solverVariable4 = null;
                if (i16 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBaseline.mGroup == i16) {
                    }
                    solverVariable5 = solverVariable18;
                    if (constraintWidget3.mParent == null) {
                        if (constraintWidget3.mLeft.mTarget == null) {
                        }
                        z = false;
                        if (constraintWidget3.mTop.mTarget == null) {
                        }
                        z2 = false;
                        if (constraintWidget3.mLeft.mTarget != null) {
                            if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mRight.mTarget != null) {
                                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mTop.mTarget != null) {
                                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                                if (constraintWidget3.mBottom.mTarget != null) {
                                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                        z3 = z;
                                                        z4 = z2;
                                                    }
                                                }
                                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                                createRow = linearSystem.createRow();
                                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                                linearSystem5.addConstraint(createRow);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mRight.mTarget != null) {
                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    } else {
                        z3 = false;
                        z4 = z3;
                    }
                    i2 = constraintWidget3.mWidth;
                    if (i2 < constraintWidget3.mMinWidth) {
                        i2 = constraintWidget3.mMinWidth;
                    }
                    i3 = constraintWidget3.mHeight;
                    if (i3 < constraintWidget3.mMinHeight) {
                        i3 = constraintWidget3.mMinHeight;
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    z5 = true;
                    z6 = true;
                    i4 = constraintWidget3.mDimensionRatioSide;
                    f = constraintWidget3.mDimensionRatio;
                    solverVariable6 = solverVariable4;
                    if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                        i5 = (int) (((float) constraintWidget3.mHeight) * f);
                        i6 = i3;
                        z7 = z6;
                        f2 = f;
                        z6 = true;
                        i7 = 0;
                        obj = null;
                    } else {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                            if (constraintWidget3.mDimensionRatioSide == -1) {
                                f = 1.0f / f;
                            }
                            i5 = i2;
                            i6 = (int) (((float) constraintWidget3.mWidth) * f);
                            z6 = z5;
                            f2 = f;
                            i7 = 1;
                            obj = null;
                            z7 = true;
                        }
                        i5 = i2;
                        i6 = i3;
                        z7 = z6;
                        i7 = i4;
                        f2 = f;
                        obj = null;
                        z6 = z5;
                    }
                    if (obj == null) {
                    }
                    if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (constraintWidget3.mHorizontalResolution != 2) {
                    }
                    i8 = i6;
                    solverVariable7 = solverVariable5;
                    solverVariable8 = solverVariable3;
                    solverVariable9 = solverVariable2;
                    solverVariable10 = solverVariable;
                    i9 = i7;
                    solverVariable11 = solverVariable6;
                    z9 = false;
                    if (constraintWidget3.mVerticalResolution == 2) {
                        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                        }
                        if (obj == null) {
                            i10 = i9;
                            if (i10 == 1) {
                                i2 = -1;
                                if (i10 == -1) {
                                }
                            } else {
                                i2 = -1;
                            }
                            z10 = true;
                            if (constraintWidget3.mBaselineDistance <= 0) {
                                constraintAnchor = constraintWidget3.mBottom;
                                i11 = i;
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mBottom.mGroup == i11) {
                                    }
                                    solverVariable5 = solverVariable8;
                                    linearSystem2 = linearSystem;
                                    if (constraintWidget3.mBaseline.mTarget == null) {
                                        i12 = constraintWidget3.mBaselineDistance;
                                        constraintAnchor2 = constraintWidget3.mBaseline;
                                    } else {
                                        constraintAnchor2 = constraintAnchor;
                                        i12 = i8;
                                    }
                                    if (i11 != Integer.MAX_VALUE) {
                                        if (constraintWidget3.mTop.mGroup == i11) {
                                        }
                                        linearSystem3 = linearSystem2;
                                        i13 = i10;
                                        solverVariable12 = solverVariable11;
                                        solverVariable13 = solverVariable5;
                                    }
                                    if (z10) {
                                    }
                                    solverVariable14 = solverVariable5;
                                    i13 = i10;
                                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable14;
                                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                } else {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            } else {
                                i13 = i10;
                                i14 = i8;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable8;
                                i7 = i;
                                linearSystem3 = linearSystem;
                                if (i7 == Integer.MAX_VALUE) {
                                    constraintWidget = this;
                                }
                                if (z10) {
                                }
                                solverVariable15 = solverVariable12;
                                solverVariable16 = solverVariable13;
                                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                                if (obj == null) {
                                    createRow2 = linearSystem.createRow();
                                    i3 = i;
                                    if (i3 == Integer.MAX_VALUE) {
                                        constraintWidget2 = this;
                                    }
                                    i4 = i13;
                                    if (i4 != 0) {
                                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                    } else {
                                        linearSystem4 = linearSystem;
                                        if (i4 != 1) {
                                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                        } else {
                                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                            } else {
                                                createObjectVariable2 = solverVariable9;
                                                solverVariable17 = solverVariable10;
                                                i15 = 3;
                                            }
                                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                            } else {
                                                solverVariable5 = solverVariable15;
                                                createObjectVariable3 = solverVariable16;
                                            }
                                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                            createObjectVariable = linearSystem.createErrorVariable();
                                            createObjectVariable2 = linearSystem.createErrorVariable();
                                            createObjectVariable.strength = 4;
                                            createObjectVariable2.strength = 4;
                                            createRow2.addError(createObjectVariable, createObjectVariable2);
                                            linearSystem4.addConstraint(createRow2);
                                        }
                                    }
                                } else {
                                    constraintWidget2 = this;
                                }
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            if (obj == null) {
                                constraintWidget2 = this;
                            } else {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    } else {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    }
                                } else {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                }
                            }
                        }
                        i10 = i9;
                        i2 = -1;
                        z10 = z9;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        constraintAnchor = constraintWidget3.mBottom;
                        i11 = i;
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup == i11) {
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            } else {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        } else {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                }
                solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
                solverVariable5 = solverVariable18;
                if (constraintWidget3.mParent == null) {
                    z3 = false;
                    z4 = z3;
                } else {
                    if (constraintWidget3.mLeft.mTarget == null) {
                    }
                    z = false;
                    if (constraintWidget3.mTop.mTarget == null) {
                    }
                    z2 = false;
                    if (constraintWidget3.mLeft.mTarget != null) {
                        if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mRight.mTarget != null) {
                                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mTop.mTarget != null) {
                                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                            if (constraintWidget3.mBottom.mTarget != null) {
                                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                    z3 = z;
                                                    z4 = z2;
                                                }
                                            }
                                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                            createRow = linearSystem.createRow();
                                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                            linearSystem5.addConstraint(createRow);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mRight.mTarget != null) {
                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
                i2 = constraintWidget3.mWidth;
                if (i2 < constraintWidget3.mMinWidth) {
                    i2 = constraintWidget3.mMinWidth;
                }
                i3 = constraintWidget3.mHeight;
                if (i3 < constraintWidget3.mMinHeight) {
                    i3 = constraintWidget3.mMinHeight;
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                z5 = true;
                z6 = true;
                i4 = constraintWidget3.mDimensionRatioSide;
                f = constraintWidget3.mDimensionRatio;
                solverVariable6 = solverVariable4;
                if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                        if (constraintWidget3.mDimensionRatioSide == -1) {
                            f = 1.0f / f;
                        }
                        i5 = i2;
                        i6 = (int) (((float) constraintWidget3.mWidth) * f);
                        z6 = z5;
                        f2 = f;
                        i7 = 1;
                        obj = null;
                        z7 = true;
                    }
                    i5 = i2;
                    i6 = i3;
                    z7 = z6;
                    i7 = i4;
                    f2 = f;
                    obj = null;
                    z6 = z5;
                } else {
                    i5 = (int) (((float) constraintWidget3.mHeight) * f);
                    i6 = i3;
                    z7 = z6;
                    f2 = f;
                    z6 = true;
                    i7 = 0;
                    obj = null;
                }
                if (obj == null) {
                }
                if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
                }
                if (constraintWidget3.mHorizontalResolution != 2) {
                }
                i8 = i6;
                solverVariable7 = solverVariable5;
                solverVariable8 = solverVariable3;
                solverVariable9 = solverVariable2;
                solverVariable10 = solverVariable;
                i9 = i7;
                solverVariable11 = solverVariable6;
                z9 = false;
                if (constraintWidget3.mVerticalResolution == 2) {
                    if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                    }
                    if (obj == null) {
                        i10 = i9;
                        i2 = -1;
                    } else {
                        i10 = i9;
                        if (i10 == 1) {
                            i2 = -1;
                        } else {
                            i2 = -1;
                            if (i10 == -1) {
                            }
                        }
                        z10 = true;
                        if (constraintWidget3.mBaselineDistance <= 0) {
                            constraintAnchor = constraintWidget3.mBottom;
                            i11 = i;
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mBottom.mGroup == i11) {
                                }
                                solverVariable5 = solverVariable8;
                                linearSystem2 = linearSystem;
                                if (constraintWidget3.mBaseline.mTarget == null) {
                                    i12 = constraintWidget3.mBaselineDistance;
                                    constraintAnchor2 = constraintWidget3.mBaseline;
                                } else {
                                    constraintAnchor2 = constraintAnchor;
                                    i12 = i8;
                                }
                                if (i11 != Integer.MAX_VALUE) {
                                    if (constraintWidget3.mTop.mGroup == i11) {
                                    }
                                    linearSystem3 = linearSystem2;
                                    i13 = i10;
                                    solverVariable12 = solverVariable11;
                                    solverVariable13 = solverVariable5;
                                }
                                if (z10) {
                                }
                                solverVariable14 = solverVariable5;
                                i13 = i10;
                                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable14;
                                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            } else {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        } else {
                            i13 = i10;
                            i14 = i8;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable8;
                            i7 = i;
                            linearSystem3 = linearSystem;
                            if (i7 == Integer.MAX_VALUE) {
                                constraintWidget = this;
                            }
                            if (z10) {
                            }
                            solverVariable15 = solverVariable12;
                            solverVariable16 = solverVariable13;
                            constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                            if (obj == null) {
                                createRow2 = linearSystem.createRow();
                                i3 = i;
                                if (i3 == Integer.MAX_VALUE) {
                                    constraintWidget2 = this;
                                }
                                i4 = i13;
                                if (i4 != 0) {
                                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                                } else {
                                    linearSystem4 = linearSystem;
                                    if (i4 != 1) {
                                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                    } else {
                                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                        } else {
                                            createObjectVariable2 = solverVariable9;
                                            solverVariable17 = solverVariable10;
                                            i15 = 3;
                                        }
                                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                        } else {
                                            solverVariable5 = solverVariable15;
                                            createObjectVariable3 = solverVariable16;
                                        }
                                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                        createObjectVariable = linearSystem.createErrorVariable();
                                        createObjectVariable2 = linearSystem.createErrorVariable();
                                        createObjectVariable.strength = 4;
                                        createObjectVariable2.strength = 4;
                                        createRow2.addError(createObjectVariable, createObjectVariable2);
                                        linearSystem4.addConstraint(createRow2);
                                    }
                                }
                            } else {
                                constraintWidget2 = this;
                            }
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        if (obj == null) {
                            constraintWidget2 = this;
                        } else {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                } else {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                }
                            } else {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            }
                        }
                    }
                    z10 = z9;
                    if (constraintWidget3.mBaselineDistance <= 0) {
                        i13 = i10;
                        i14 = i8;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable8;
                        i7 = i;
                        linearSystem3 = linearSystem;
                        if (i7 == Integer.MAX_VALUE) {
                            constraintWidget = this;
                        }
                        if (z10) {
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                        if (obj == null) {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            } else {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                } else {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                }
                            }
                        } else {
                            constraintWidget2 = this;
                        }
                    }
                    constraintAnchor = constraintWidget3.mBottom;
                    i11 = i;
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mBottom.mGroup == i11) {
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        } else {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    } else {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    if (obj == null) {
                        constraintWidget2 = this;
                    } else {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            } else {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            }
                        } else {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        }
                    }
                }
            }
        }
        solverVariable4 = linearSystem5.createObjectVariable(constraintWidget3.mBottom);
        if (i16 != Integer.MAX_VALUE) {
            if (constraintWidget3.mBaseline.mGroup == i16) {
            }
            solverVariable5 = solverVariable18;
            if (constraintWidget3.mParent == null) {
                if (constraintWidget3.mLeft.mTarget == null) {
                }
                z = false;
                if (constraintWidget3.mTop.mTarget == null) {
                }
                z2 = false;
                if (constraintWidget3.mLeft.mTarget != null) {
                    if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                        constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                        if (constraintWidget3.mRight.mTarget != null) {
                            if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mTop.mTarget != null) {
                                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                        if (constraintWidget3.mBottom.mTarget != null) {
                                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                                z3 = z;
                                                z4 = z2;
                                            }
                                        }
                                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                        createRow = linearSystem.createRow();
                                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                        linearSystem5.addConstraint(createRow);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    }
                }
                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
                createRow = linearSystem.createRow();
                createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
                linearSystem5.addConstraint(createRow);
                if (constraintWidget3.mRight.mTarget != null) {
                    if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                        constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                        if (constraintWidget3.mTop.mTarget != null) {
                            if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                if (constraintWidget3.mBottom.mTarget != null) {
                                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                        z3 = z;
                                        z4 = z2;
                                    }
                                }
                                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                createRow = linearSystem.createRow();
                                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                linearSystem5.addConstraint(createRow);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    }
                }
                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                createRow = linearSystem.createRow();
                createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                linearSystem5.addConstraint(createRow);
                if (constraintWidget3.mTop.mTarget != null) {
                    if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                        constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                        if (constraintWidget3.mBottom.mTarget != null) {
                            if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                z3 = z;
                                z4 = z2;
                            }
                        }
                        createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                        createRow = linearSystem.createRow();
                        createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                        linearSystem5.addConstraint(createRow);
                        z3 = z;
                        z4 = z2;
                    }
                }
                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                createRow = linearSystem.createRow();
                createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                linearSystem5.addConstraint(createRow);
                if (constraintWidget3.mBottom.mTarget != null) {
                    if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                        constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                        z3 = z;
                        z4 = z2;
                    }
                }
                createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                createRow = linearSystem.createRow();
                createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                linearSystem5.addConstraint(createRow);
                z3 = z;
                z4 = z2;
            } else {
                z3 = false;
                z4 = z3;
            }
            i2 = constraintWidget3.mWidth;
            if (i2 < constraintWidget3.mMinWidth) {
                i2 = constraintWidget3.mMinWidth;
            }
            i3 = constraintWidget3.mHeight;
            if (i3 < constraintWidget3.mMinHeight) {
                i3 = constraintWidget3.mMinHeight;
            }
            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
            }
            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
            }
            z5 = true;
            z6 = true;
            i4 = constraintWidget3.mDimensionRatioSide;
            f = constraintWidget3.mDimensionRatio;
            solverVariable6 = solverVariable4;
            if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
            }
            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
                i5 = (int) (((float) constraintWidget3.mHeight) * f);
                i6 = i3;
                z7 = z6;
                f2 = f;
                z6 = true;
                i7 = 0;
                obj = null;
            } else {
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                    if (constraintWidget3.mDimensionRatioSide == -1) {
                        f = 1.0f / f;
                    }
                    i5 = i2;
                    i6 = (int) (((float) constraintWidget3.mWidth) * f);
                    z6 = z5;
                    f2 = f;
                    i7 = 1;
                    obj = null;
                    z7 = true;
                }
                i5 = i2;
                i6 = i3;
                z7 = z6;
                i7 = i4;
                f2 = f;
                obj = null;
                z6 = z5;
            }
            if (obj == null) {
            }
            if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
            }
            if (constraintWidget3.mHorizontalResolution != 2) {
            }
            i8 = i6;
            solverVariable7 = solverVariable5;
            solverVariable8 = solverVariable3;
            solverVariable9 = solverVariable2;
            solverVariable10 = solverVariable;
            i9 = i7;
            solverVariable11 = solverVariable6;
            z9 = false;
            if (constraintWidget3.mVerticalResolution == 2) {
                if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
                }
                if (obj == null) {
                    i10 = i9;
                    if (i10 == 1) {
                        i2 = -1;
                        if (i10 == -1) {
                        }
                    } else {
                        i2 = -1;
                    }
                    z10 = true;
                    if (constraintWidget3.mBaselineDistance <= 0) {
                        constraintAnchor = constraintWidget3.mBottom;
                        i11 = i;
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mBottom.mGroup == i11) {
                            }
                            solverVariable5 = solverVariable8;
                            linearSystem2 = linearSystem;
                            if (constraintWidget3.mBaseline.mTarget == null) {
                                i12 = constraintWidget3.mBaselineDistance;
                                constraintAnchor2 = constraintWidget3.mBaseline;
                            } else {
                                constraintAnchor2 = constraintAnchor;
                                i12 = i8;
                            }
                            if (i11 != Integer.MAX_VALUE) {
                                if (constraintWidget3.mTop.mGroup == i11) {
                                }
                                linearSystem3 = linearSystem2;
                                i13 = i10;
                                solverVariable12 = solverVariable11;
                                solverVariable13 = solverVariable5;
                            }
                            if (z10) {
                            }
                            solverVariable14 = solverVariable5;
                            i13 = i10;
                            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable14;
                            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        } else {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    } else {
                        i13 = i10;
                        i14 = i8;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable8;
                        i7 = i;
                        linearSystem3 = linearSystem;
                        if (i7 == Integer.MAX_VALUE) {
                            constraintWidget = this;
                        }
                        if (z10) {
                        }
                        solverVariable15 = solverVariable12;
                        solverVariable16 = solverVariable13;
                        constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                        if (obj == null) {
                            createRow2 = linearSystem.createRow();
                            i3 = i;
                            if (i3 == Integer.MAX_VALUE) {
                                constraintWidget2 = this;
                            }
                            i4 = i13;
                            if (i4 != 0) {
                                linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                            } else {
                                linearSystem4 = linearSystem;
                                if (i4 != 1) {
                                    linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                                } else {
                                    if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                        linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                    } else {
                                        createObjectVariable2 = solverVariable9;
                                        solverVariable17 = solverVariable10;
                                        i15 = 3;
                                    }
                                    if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                        linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                    } else {
                                        solverVariable5 = solverVariable15;
                                        createObjectVariable3 = solverVariable16;
                                    }
                                    createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                    createObjectVariable = linearSystem.createErrorVariable();
                                    createObjectVariable2 = linearSystem.createErrorVariable();
                                    createObjectVariable.strength = 4;
                                    createObjectVariable2.strength = 4;
                                    createRow2.addError(createObjectVariable, createObjectVariable2);
                                    linearSystem4.addConstraint(createRow2);
                                }
                            }
                        } else {
                            constraintWidget2 = this;
                        }
                    }
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    if (obj == null) {
                        constraintWidget2 = this;
                    } else {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            } else {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            }
                        } else {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        }
                    }
                }
                i10 = i9;
                i2 = -1;
                z10 = z9;
                if (constraintWidget3.mBaselineDistance <= 0) {
                    i13 = i10;
                    i14 = i8;
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable8;
                    i7 = i;
                    linearSystem3 = linearSystem;
                    if (i7 == Integer.MAX_VALUE) {
                        constraintWidget = this;
                    }
                    if (z10) {
                    }
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                    if (obj == null) {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        } else {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            } else {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            }
                        }
                    } else {
                        constraintWidget2 = this;
                    }
                }
                constraintAnchor = constraintWidget3.mBottom;
                i11 = i;
                if (i11 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mBottom.mGroup == i11) {
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    } else {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                }
                solverVariable5 = solverVariable8;
                linearSystem2 = linearSystem;
                linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                if (constraintWidget3.mBaseline.mTarget == null) {
                    constraintAnchor2 = constraintAnchor;
                    i12 = i8;
                } else {
                    i12 = constraintWidget3.mBaselineDistance;
                    constraintAnchor2 = constraintWidget3.mBaseline;
                }
                if (i11 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mTop.mGroup == i11) {
                    }
                    linearSystem3 = linearSystem2;
                    i13 = i10;
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable5;
                }
                if (z10) {
                }
                solverVariable14 = solverVariable5;
                i13 = i10;
                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                solverVariable12 = solverVariable11;
                solverVariable13 = solverVariable14;
                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                solverVariable15 = solverVariable12;
                solverVariable16 = solverVariable13;
                if (obj == null) {
                    constraintWidget2 = this;
                } else {
                    createRow2 = linearSystem.createRow();
                    i3 = i;
                    if (i3 == Integer.MAX_VALUE) {
                        constraintWidget2 = this;
                    }
                    i4 = i13;
                    if (i4 != 0) {
                        linearSystem4 = linearSystem;
                        if (i4 != 1) {
                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                            } else {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                            }
                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                            } else {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                            }
                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                            createObjectVariable = linearSystem.createErrorVariable();
                            createObjectVariable2 = linearSystem.createErrorVariable();
                            createObjectVariable.strength = 4;
                            createObjectVariable2.strength = 4;
                            createRow2.addError(createObjectVariable, createObjectVariable2);
                            linearSystem4.addConstraint(createRow2);
                        } else {
                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                        }
                    } else {
                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                    }
                }
            }
        }
        solverVariable18 = linearSystem5.createObjectVariable(constraintWidget3.mBaseline);
        solverVariable5 = solverVariable18;
        if (constraintWidget3.mParent == null) {
            z3 = false;
            z4 = z3;
        } else {
            if (constraintWidget3.mLeft.mTarget == null) {
            }
            z = false;
            if (constraintWidget3.mTop.mTarget == null) {
            }
            z2 = false;
            if (constraintWidget3.mLeft.mTarget != null) {
                if (constraintWidget3.mLeft.mTarget.mOwner == constraintWidget3.mParent) {
                    constraintWidget3.mLeft.setConnectionType(ConnectionType.STRICT);
                    if (constraintWidget3.mRight.mTarget != null) {
                        if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mTop.mTarget != null) {
                                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                                    if (constraintWidget3.mBottom.mTarget != null) {
                                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                            z3 = z;
                                            z4 = z2;
                                        }
                                    }
                                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                                    createRow = linearSystem.createRow();
                                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                                    linearSystem5.addConstraint(createRow);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
            }
            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mLeft);
            createRow = linearSystem.createRow();
            createRow.createRowGreaterThan(solverVariable, createObjectVariable, linearSystem.createSlackVariable(), 0);
            linearSystem5.addConstraint(createRow);
            if (constraintWidget3.mRight.mTarget != null) {
                if (constraintWidget3.mRight.mTarget.mOwner == constraintWidget3.mParent) {
                    constraintWidget3.mRight.setConnectionType(ConnectionType.STRICT);
                    if (constraintWidget3.mTop.mTarget != null) {
                        if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                            constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                            if (constraintWidget3.mBottom.mTarget != null) {
                                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                                    z3 = z;
                                    z4 = z2;
                                }
                            }
                            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                            createRow = linearSystem.createRow();
                            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                            linearSystem5.addConstraint(createRow);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
            }
            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mRight);
            createRow = linearSystem.createRow();
            createRow.createRowGreaterThan(createObjectVariable, solverVariable2, linearSystem.createSlackVariable(), 0);
            linearSystem5.addConstraint(createRow);
            if (constraintWidget3.mTop.mTarget != null) {
                if (constraintWidget3.mTop.mTarget.mOwner == constraintWidget3.mParent) {
                    constraintWidget3.mTop.setConnectionType(ConnectionType.STRICT);
                    if (constraintWidget3.mBottom.mTarget != null) {
                        if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                            constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                            z3 = z;
                            z4 = z2;
                        }
                    }
                    createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
                    createRow = linearSystem.createRow();
                    createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
                    linearSystem5.addConstraint(createRow);
                    z3 = z;
                    z4 = z2;
                }
            }
            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mTop);
            createRow = linearSystem.createRow();
            createRow.createRowGreaterThan(solverVariable3, createObjectVariable, linearSystem.createSlackVariable(), 0);
            linearSystem5.addConstraint(createRow);
            if (constraintWidget3.mBottom.mTarget != null) {
                if (constraintWidget3.mBottom.mTarget.mOwner != constraintWidget3.mParent) {
                    constraintWidget3.mBottom.setConnectionType(ConnectionType.STRICT);
                    z3 = z;
                    z4 = z2;
                }
            }
            createObjectVariable = linearSystem5.createObjectVariable(constraintWidget3.mParent.mBottom);
            createRow = linearSystem.createRow();
            createRow.createRowGreaterThan(createObjectVariable, solverVariable4, linearSystem.createSlackVariable(), 0);
            linearSystem5.addConstraint(createRow);
            z3 = z;
            z4 = z2;
        }
        i2 = constraintWidget3.mWidth;
        if (i2 < constraintWidget3.mMinWidth) {
            i2 = constraintWidget3.mMinWidth;
        }
        i3 = constraintWidget3.mHeight;
        if (i3 < constraintWidget3.mMinHeight) {
            i3 = constraintWidget3.mMinHeight;
        }
        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
        }
        if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
        }
        z5 = true;
        z6 = true;
        i4 = constraintWidget3.mDimensionRatioSide;
        f = constraintWidget3.mDimensionRatio;
        solverVariable6 = solverVariable4;
        if (constraintWidget3.mHorizontalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
        }
        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.MATCH_CONSTRAINT) {
            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.MATCH_CONSTRAINT) {
                if (constraintWidget3.mDimensionRatioSide == -1) {
                    f = 1.0f / f;
                }
                i5 = i2;
                i6 = (int) (((float) constraintWidget3.mWidth) * f);
                z6 = z5;
                f2 = f;
                i7 = 1;
                obj = null;
                z7 = true;
            }
            i5 = i2;
            i6 = i3;
            z7 = z6;
            i7 = i4;
            f2 = f;
            obj = null;
            z6 = z5;
        } else {
            i5 = (int) (((float) constraintWidget3.mHeight) * f);
            i6 = i3;
            z7 = z6;
            f2 = f;
            z6 = true;
            i7 = 0;
            obj = null;
        }
        if (obj == null) {
        }
        if (constraintWidget3.mHorizontalDimensionBehaviour != DimensionBehaviour.WRAP_CONTENT) {
        }
        if (constraintWidget3.mHorizontalResolution != 2) {
        }
        i8 = i6;
        solverVariable7 = solverVariable5;
        solverVariable8 = solverVariable3;
        solverVariable9 = solverVariable2;
        solverVariable10 = solverVariable;
        i9 = i7;
        solverVariable11 = solverVariable6;
        z9 = false;
        if (constraintWidget3.mVerticalResolution == 2) {
            if (constraintWidget3.mVerticalDimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
            }
            if (obj == null) {
                i10 = i9;
                i2 = -1;
            } else {
                i10 = i9;
                if (i10 == 1) {
                    i2 = -1;
                } else {
                    i2 = -1;
                    if (i10 == -1) {
                    }
                }
                z10 = true;
                if (constraintWidget3.mBaselineDistance <= 0) {
                    constraintAnchor = constraintWidget3.mBottom;
                    i11 = i;
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mBottom.mGroup == i11) {
                        }
                        solverVariable5 = solverVariable8;
                        linearSystem2 = linearSystem;
                        if (constraintWidget3.mBaseline.mTarget == null) {
                            i12 = constraintWidget3.mBaselineDistance;
                            constraintAnchor2 = constraintWidget3.mBaseline;
                        } else {
                            constraintAnchor2 = constraintAnchor;
                            i12 = i8;
                        }
                        if (i11 != Integer.MAX_VALUE) {
                            if (constraintWidget3.mTop.mGroup == i11) {
                            }
                            linearSystem3 = linearSystem2;
                            i13 = i10;
                            solverVariable12 = solverVariable11;
                            solverVariable13 = solverVariable5;
                        }
                        if (z10) {
                        }
                        solverVariable14 = solverVariable5;
                        i13 = i10;
                        constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable14;
                        linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                    }
                    solverVariable5 = solverVariable8;
                    linearSystem2 = linearSystem;
                    linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
                    if (constraintWidget3.mBaseline.mTarget == null) {
                        constraintAnchor2 = constraintAnchor;
                        i12 = i8;
                    } else {
                        i12 = constraintWidget3.mBaselineDistance;
                        constraintAnchor2 = constraintWidget3.mBaseline;
                    }
                    if (i11 != Integer.MAX_VALUE) {
                        if (constraintWidget3.mTop.mGroup == i11) {
                        }
                        linearSystem3 = linearSystem2;
                        i13 = i10;
                        solverVariable12 = solverVariable11;
                        solverVariable13 = solverVariable5;
                    }
                    if (z10) {
                    }
                    solverVariable14 = solverVariable5;
                    i13 = i10;
                    constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable14;
                    linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
                } else {
                    i13 = i10;
                    i14 = i8;
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable8;
                    i7 = i;
                    linearSystem3 = linearSystem;
                    if (i7 == Integer.MAX_VALUE) {
                        constraintWidget = this;
                    }
                    if (z10) {
                    }
                    solverVariable15 = solverVariable12;
                    solverVariable16 = solverVariable13;
                    constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                    if (obj == null) {
                        createRow2 = linearSystem.createRow();
                        i3 = i;
                        if (i3 == Integer.MAX_VALUE) {
                            constraintWidget2 = this;
                        }
                        i4 = i13;
                        if (i4 != 0) {
                            linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                        } else {
                            linearSystem4 = linearSystem;
                            if (i4 != 1) {
                                linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                            } else {
                                if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                    linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                                } else {
                                    createObjectVariable2 = solverVariable9;
                                    solverVariable17 = solverVariable10;
                                    i15 = 3;
                                }
                                if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                    linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                                } else {
                                    solverVariable5 = solverVariable15;
                                    createObjectVariable3 = solverVariable16;
                                }
                                createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                                createObjectVariable = linearSystem.createErrorVariable();
                                createObjectVariable2 = linearSystem.createErrorVariable();
                                createObjectVariable.strength = 4;
                                createObjectVariable2.strength = 4;
                                createRow2.addError(createObjectVariable, createObjectVariable2);
                                linearSystem4.addConstraint(createRow2);
                            }
                        }
                    } else {
                        constraintWidget2 = this;
                    }
                }
                solverVariable15 = solverVariable12;
                solverVariable16 = solverVariable13;
                if (obj == null) {
                    constraintWidget2 = this;
                } else {
                    createRow2 = linearSystem.createRow();
                    i3 = i;
                    if (i3 == Integer.MAX_VALUE) {
                        constraintWidget2 = this;
                    }
                    i4 = i13;
                    if (i4 != 0) {
                        linearSystem4 = linearSystem;
                        if (i4 != 1) {
                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                            } else {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                            }
                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                            } else {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                            }
                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                            createObjectVariable = linearSystem.createErrorVariable();
                            createObjectVariable2 = linearSystem.createErrorVariable();
                            createObjectVariable.strength = 4;
                            createObjectVariable2.strength = 4;
                            createRow2.addError(createObjectVariable, createObjectVariable2);
                            linearSystem4.addConstraint(createRow2);
                        } else {
                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                        }
                    } else {
                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                    }
                }
            }
            z10 = z9;
            if (constraintWidget3.mBaselineDistance <= 0) {
                i13 = i10;
                i14 = i8;
                solverVariable12 = solverVariable11;
                solverVariable13 = solverVariable8;
                i7 = i;
                linearSystem3 = linearSystem;
                if (i7 == Integer.MAX_VALUE) {
                    constraintWidget = this;
                }
                if (z10) {
                }
                solverVariable15 = solverVariable12;
                solverVariable16 = solverVariable13;
                constraintWidget.applyConstraints(linearSystem3, z5, z7, constraintWidget.mTop, constraintWidget.mBottom, constraintWidget.mY, constraintWidget.mY + i14, i14, constraintWidget.mMinHeight, constraintWidget.mVerticalBiasPercent, z10, z4, constraintWidget.mMatchConstraintDefaultHeight, constraintWidget.mMatchConstraintMinHeight, constraintWidget.mMatchConstraintMaxHeight);
                if (obj == null) {
                    createRow2 = linearSystem.createRow();
                    i3 = i;
                    if (i3 == Integer.MAX_VALUE) {
                        constraintWidget2 = this;
                    }
                    i4 = i13;
                    if (i4 != 0) {
                        linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                    } else {
                        linearSystem4 = linearSystem;
                        if (i4 != 1) {
                            linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                        } else {
                            if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                                linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                            } else {
                                createObjectVariable2 = solverVariable9;
                                solverVariable17 = solverVariable10;
                                i15 = 3;
                            }
                            if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                                linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                            } else {
                                solverVariable5 = solverVariable15;
                                createObjectVariable3 = solverVariable16;
                            }
                            createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                            createObjectVariable = linearSystem.createErrorVariable();
                            createObjectVariable2 = linearSystem.createErrorVariable();
                            createObjectVariable.strength = 4;
                            createObjectVariable2.strength = 4;
                            createRow2.addError(createObjectVariable, createObjectVariable2);
                            linearSystem4.addConstraint(createRow2);
                        }
                    }
                } else {
                    constraintWidget2 = this;
                }
            }
            constraintAnchor = constraintWidget3.mBottom;
            i11 = i;
            if (i11 != Integer.MAX_VALUE) {
                if (constraintWidget3.mBottom.mGroup == i11) {
                }
                solverVariable5 = solverVariable8;
                linearSystem2 = linearSystem;
                if (constraintWidget3.mBaseline.mTarget == null) {
                    i12 = constraintWidget3.mBaselineDistance;
                    constraintAnchor2 = constraintWidget3.mBaseline;
                } else {
                    constraintAnchor2 = constraintAnchor;
                    i12 = i8;
                }
                if (i11 != Integer.MAX_VALUE) {
                    if (constraintWidget3.mTop.mGroup == i11) {
                    }
                    linearSystem3 = linearSystem2;
                    i13 = i10;
                    solverVariable12 = solverVariable11;
                    solverVariable13 = solverVariable5;
                }
                if (z10) {
                }
                solverVariable14 = solverVariable5;
                i13 = i10;
                constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
                solverVariable12 = solverVariable11;
                solverVariable13 = solverVariable14;
                linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
            }
            solverVariable5 = solverVariable8;
            linearSystem2 = linearSystem;
            linearSystem2.addEquality(solverVariable7, solverVariable5, getBaselineDistance(), 5);
            if (constraintWidget3.mBaseline.mTarget == null) {
                constraintAnchor2 = constraintAnchor;
                i12 = i8;
            } else {
                i12 = constraintWidget3.mBaselineDistance;
                constraintAnchor2 = constraintWidget3.mBaseline;
            }
            if (i11 != Integer.MAX_VALUE) {
                if (constraintWidget3.mTop.mGroup == i11) {
                }
                linearSystem3 = linearSystem2;
                i13 = i10;
                solverVariable12 = solverVariable11;
                solverVariable13 = solverVariable5;
            }
            if (z10) {
            }
            solverVariable14 = solverVariable5;
            i13 = i10;
            constraintWidget3.applyConstraints(linearSystem2, z5, z7, constraintWidget3.mTop, constraintAnchor2, constraintWidget3.mY, constraintWidget3.mY + i12, i12, constraintWidget3.mMinHeight, constraintWidget3.mVerticalBiasPercent, z10, z4, constraintWidget3.mMatchConstraintDefaultHeight, constraintWidget3.mMatchConstraintMinHeight, constraintWidget3.mMatchConstraintMaxHeight);
            solverVariable12 = solverVariable11;
            solverVariable13 = solverVariable14;
            linearSystem.addEquality(solverVariable12, solverVariable13, i8, 5);
            solverVariable15 = solverVariable12;
            solverVariable16 = solverVariable13;
            if (obj == null) {
                constraintWidget2 = this;
            } else {
                createRow2 = linearSystem.createRow();
                i3 = i;
                if (i3 == Integer.MAX_VALUE) {
                    constraintWidget2 = this;
                }
                i4 = i13;
                if (i4 != 0) {
                    linearSystem4 = linearSystem;
                    if (i4 != 1) {
                        if (constraintWidget2.mMatchConstraintMinWidth <= 0) {
                            createObjectVariable2 = solverVariable9;
                            solverVariable17 = solverVariable10;
                            i15 = 3;
                        } else {
                            createObjectVariable2 = solverVariable9;
                            solverVariable17 = solverVariable10;
                            i15 = 3;
                            linearSystem4.addGreaterThan(createObjectVariable2, solverVariable17, constraintWidget2.mMatchConstraintMinWidth, 3);
                        }
                        if (constraintWidget2.mMatchConstraintMinHeight <= 0) {
                            solverVariable5 = solverVariable15;
                            createObjectVariable3 = solverVariable16;
                        } else {
                            solverVariable5 = solverVariable15;
                            createObjectVariable3 = solverVariable16;
                            linearSystem4.addGreaterThan(solverVariable5, createObjectVariable3, constraintWidget2.mMatchConstraintMinHeight, i15);
                        }
                        createRow2.createRowDimensionRatio(createObjectVariable2, solverVariable17, solverVariable5, createObjectVariable3, f2);
                        createObjectVariable = linearSystem.createErrorVariable();
                        createObjectVariable2 = linearSystem.createErrorVariable();
                        createObjectVariable.strength = 4;
                        createObjectVariable2.strength = 4;
                        createRow2.addError(createObjectVariable, createObjectVariable2);
                        linearSystem4.addConstraint(createRow2);
                    } else {
                        linearSystem4.addConstraint(createRow2.createRowDimensionRatio(solverVariable15, solverVariable16, solverVariable9, solverVariable10, f2));
                    }
                } else {
                    linearSystem.addConstraint(createRow2.createRowDimensionRatio(solverVariable9, solverVariable10, solverVariable15, solverVariable16, f2));
                }
            }
        }
    }

    private void applyConstraints(LinearSystem linearSystem, boolean z, boolean z2, ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int i, int i2, int i3, int i4, float f, boolean z3, boolean z4, int i5, int i6, int i7) {
        boolean z5;
        LinearSystem linearSystem2 = linearSystem;
        int i8 = i;
        int i9 = i2;
        int i10 = i4;
        int i11 = i6;
        int i12 = i7;
        SolverVariable createObjectVariable = linearSystem2.createObjectVariable(constraintAnchor);
        SolverVariable createObjectVariable2 = linearSystem2.createObjectVariable(constraintAnchor2);
        SolverVariable createObjectVariable3 = linearSystem2.createObjectVariable(constraintAnchor.getTarget());
        SolverVariable createObjectVariable4 = linearSystem2.createObjectVariable(constraintAnchor2.getTarget());
        int margin = constraintAnchor.getMargin();
        i12 = constraintAnchor2.getMargin();
        if (this.mVisibility == 8) {
            z5 = true;
            i11 = 0;
        } else {
            z5 = z2;
            i11 = i3;
        }
        if (createObjectVariable3 == null && createObjectVariable4 == null) {
            linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable, i8));
            if (!z3) {
                if (z) {
                    linearSystem2.addConstraint(LinearSystem.createRowEquals(linearSystem2, createObjectVariable2, createObjectVariable, i10, true));
                } else if (z5) {
                    linearSystem2.addConstraint(LinearSystem.createRowEquals(linearSystem2, createObjectVariable2, createObjectVariable, i11, false));
                } else {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, i9));
                }
            }
        } else if (createObjectVariable3 != null && createObjectVariable4 == null) {
            linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable, createObjectVariable3, margin));
            if (z) {
                linearSystem2.addConstraint(LinearSystem.createRowEquals(linearSystem2, createObjectVariable2, createObjectVariable, i10, true));
            } else if (!z3) {
                if (z5) {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable, i11));
                } else {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, i9));
                }
            }
        } else if (createObjectVariable3 == null && createObjectVariable4 != null) {
            linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable4, -1 * i12));
            if (z) {
                linearSystem2.addConstraint(LinearSystem.createRowEquals(linearSystem2, createObjectVariable2, createObjectVariable, i10, true));
            } else if (!z3) {
                if (z5) {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable, i11));
                } else {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable, i8));
                }
            }
        } else if (z5) {
            if (z) {
                linearSystem2.addConstraint(LinearSystem.createRowEquals(linearSystem2, createObjectVariable2, createObjectVariable, i10, true));
            } else {
                linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable, i11));
            }
            if (constraintAnchor.getStrength() != constraintAnchor2.getStrength()) {
                SolverVariable createSlackVariable;
                ArrayRow createRow;
                if (constraintAnchor.getStrength() == Strength.STRONG) {
                    linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable, createObjectVariable3, margin));
                    createSlackVariable = linearSystem.createSlackVariable();
                    createRow = linearSystem.createRow();
                    createRow.createRowLowerThan(createObjectVariable2, createObjectVariable4, createSlackVariable, -1 * i12);
                    linearSystem2.addConstraint(createRow);
                    return;
                }
                createSlackVariable = linearSystem.createSlackVariable();
                createRow = linearSystem.createRow();
                createRow.createRowGreaterThan(createObjectVariable, createObjectVariable3, createSlackVariable, margin);
                linearSystem2.addConstraint(createRow);
                linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable4, -1 * i12));
            } else if (createObjectVariable3 == createObjectVariable4) {
                linearSystem2.addConstraint(LinearSystem.createRowCentering(linearSystem2, createObjectVariable, createObjectVariable3, 0, 0.5f, createObjectVariable4, createObjectVariable2, 0, true));
            } else if (!z4) {
                linearSystem2.addConstraint(LinearSystem.createRowGreaterThan(linearSystem2, createObjectVariable, createObjectVariable3, margin, constraintAnchor.getConnectionType() != ConnectionType.STRICT));
                linearSystem2.addConstraint(LinearSystem.createRowLowerThan(linearSystem2, createObjectVariable2, createObjectVariable4, -1 * i12, constraintAnchor2.getConnectionType() != ConnectionType.STRICT));
                linearSystem2.addConstraint(LinearSystem.createRowCentering(linearSystem2, createObjectVariable, createObjectVariable3, margin, f, createObjectVariable4, createObjectVariable2, i12, false));
            }
        } else if (z3) {
            linearSystem2.addGreaterThan(createObjectVariable, createObjectVariable3, margin, 3);
            linearSystem2.addLowerThan(createObjectVariable2, createObjectVariable4, -1 * i12, 3);
            linearSystem2.addConstraint(LinearSystem.createRowCentering(linearSystem2, createObjectVariable, createObjectVariable3, margin, f, createObjectVariable4, createObjectVariable2, i12, true));
        } else if (!z4) {
            int i13;
            int i14;
            if (i5 == 1) {
                i10 = i6;
                if (i10 <= i11) {
                    i10 = i11;
                }
                i13 = i12;
                i14 = i7;
                if (i14 > 0) {
                    if (i14 < i10) {
                        i10 = i14;
                    } else {
                        linearSystem2.addLowerThan(createObjectVariable2, createObjectVariable, i14, 3);
                    }
                }
                linearSystem2.addEquality(createObjectVariable2, createObjectVariable, i10, 3);
                linearSystem2.addGreaterThan(createObjectVariable, createObjectVariable3, margin, 2);
                linearSystem2.addLowerThan(createObjectVariable2, createObjectVariable4, -i13, 2);
                linearSystem2.addCentering(createObjectVariable, createObjectVariable3, margin, f, createObjectVariable4, createObjectVariable2, i13, 4);
                return;
            }
            i13 = i12;
            i14 = i7;
            if (i6 == 0 && i14 == 0) {
                linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable, createObjectVariable3, margin));
                linearSystem2.addConstraint(linearSystem.createRow().createRowEquals(createObjectVariable2, createObjectVariable4, -1 * i13));
                return;
            }
            if (i14 > 0) {
                linearSystem2.addLowerThan(createObjectVariable2, createObjectVariable, i14, 3);
            }
            linearSystem2.addGreaterThan(createObjectVariable, createObjectVariable3, margin, 2);
            linearSystem2.addLowerThan(createObjectVariable2, createObjectVariable4, -i13, 2);
            linearSystem2.addCentering(createObjectVariable, createObjectVariable3, margin, f, createObjectVariable4, createObjectVariable2, i13, 4);
        }
    }

    public void updateFromSolver(LinearSystem linearSystem, int i) {
        if (i == Integer.MAX_VALUE) {
            setFrame(linearSystem.getObjectVariableValue(this.mLeft), linearSystem.getObjectVariableValue(this.mTop), linearSystem.getObjectVariableValue(this.mRight), linearSystem.getObjectVariableValue(this.mBottom));
        } else if (i == -2) {
            setFrame(this.mSolverLeft, this.mSolverTop, this.mSolverRight, this.mSolverBottom);
        } else {
            if (this.mLeft.mGroup == i) {
                this.mSolverLeft = linearSystem.getObjectVariableValue(this.mLeft);
            }
            if (this.mTop.mGroup == i) {
                this.mSolverTop = linearSystem.getObjectVariableValue(this.mTop);
            }
            if (this.mRight.mGroup == i) {
                this.mSolverRight = linearSystem.getObjectVariableValue(this.mRight);
            }
            if (this.mBottom.mGroup == i) {
                this.mSolverBottom = linearSystem.getObjectVariableValue(this.mBottom);
            }
        }
    }

    public void updateFromSolver(LinearSystem linearSystem) {
        updateFromSolver(linearSystem, Integer.MAX_VALUE);
    }
}
